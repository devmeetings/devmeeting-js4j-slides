---
title: JavaScript For Java Developers (part 2)
trainersSecret: 123asd2
slides:
  - id: opening
    name: Hello World
    title: JavaScript 4 Java Devs - part 2
    left:
      text: |
          <h3>
            Hello <span class="user-name"></span>!
          </h3>
          <h2>
            <a href="http://devmeetings.pl"><img src="http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg"></a>
            rocks!
          </h2>
      code:
        small: true
        hideOutput: true
        content: |
          var username = localStorage.getItem('name');
          while (!username) {
            username = prompt("Please provide your name");
          }
          localStorage.setItem('name', username);
          document.querySelector('.user-name').innerText = username;
    right:
      text:
          >
          <div class="text-center">
            <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
              <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
            </a>
          </div>
    notes: |
      What will we learn today:
        - Advanced JS
        - Introduction to Express.js
        - Teasers for other features:
          - JS Frameworks
          - Even more advanced JS
    script: &trainingStats |
      var $checkbox = $('.training-checkbox');
      var username = localStorage.getItem('name');
      var training = $checkbox.data('training');
      $checkbox.bind('change', function(){
        var training = $(this).data('training');
        var state = this.checked;
        localStorage.setItem('training-'+training, state);
        $.ajax({
          method: 'POST',
          url: 'http://todr.me:3002/trainings',
          data: {
            user: username,
            currentTraining: 'js4j-p2',
            training: training,
            isGoing: state
          }
        });
      });
      $checkbox.attr('checked', !!localStorage.getItem('training-'+training));

  - id: ready
    name: Ready
    title: Ready?
    microtasks:
      - description: Say that you are ready!
        hint: Change value of <code>ready</code> to <code>true</code>
        js_assert:
          ready === true
    code:
      small: true
      hideOutput: true
      content: |
        var ready = false;

 # TODO: small reminder about JS
  - id: js-reminder
    name: JS Reminder
    title: JavaScript - Quick reminder
    microtasks:
      - description: Change selector of <code>$todosContainer</code> to it's <code>id</code> attribute
        hint: Change <code>.todos</code> selector to id selector <code>#todos</code>
        js: |
          querySelector\(['"]#todos-id['"]\);
      - description: Add <code>h1</code> header with <code>text-success</code> class
        hint: Add <code>&lt;h1 class="text-success"&gt;</code> somewhere in HTML
        html: |
          h1\s+class="text-success"

    fiddle:
      big: true
      js: |
          var todos= [
            { title: "Completed first part of JS4J", completed: true }, 
            { title: "Completed second part of JS4J", completed: false }
          ];

          var $todos = todos.map(function(todo) {

              var $todo = document.createElement('label');
              $todo.className = 'list-group-item';

              var $checkbox = document.createElement('input');
              $checkbox.type = 'checkbox';
              $checkbox.checked = todo.completed;

              $checkbox.addEventListener('change', function() {
                  todo.completed = $checkbox.checked;
                  console.table(todos);
              });

              $todo.appendChild($checkbox);
              $todo.appendChild(document.createTextNode(todo.title));

              return $todo;

          });

          var $todosContainer = document.querySelector('.todos');
          $todos.map($todosContainer.appendChild.bind($todosContainer));
      html: &htmlTodos |
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Todos</title>
              <link rel="stylesheet" href="css/bootstrap.css">
            </head>
            <body>
              <!-- page content -->
              <div class="todos list-group" id="todos-id"></div>
              <script src="//code.jquery.com/jquery.js"></script>
              <script src="js/bootstrap.js"></script>
            </body>
          </html>
  - id: task-js
    name: Task 1
    title: Task - Facebook stream
    task:
        duration: 40
        objectives:
            - Display stream of posts using DOM elements
            - Add <span class="glyphicon glyphicon-thumbs-up"></span> Like support
        extras:
            - Adding new posts
            - Comments support
        solution:
            fiddle:
                big: true
                active: js
                html: *htmlTodos
                js: |
                    var element = function(tag) {
                      var data = tag.split('.');
                      var e = document.createElement(data[0]);
                      e.className = data.slice(1).join(' ');
                      return e;
                    };
                    var text = function(t) {
                        return document.createTextNode(t);
                    };
                    var appendTo = function($to) {
                        return function(/* args */) {
                            [].slice.call(arguments).filter(function(el){
                                return el instanceof Node;
                            }).map($to.appendChild.bind($to));
                            return $to;
                        };
                    };
                    
                    var todos= [
                      { title: "Completed first part of JS4J", likes: 0, comments: [{
                             title: "First comment",
                             likes: 10
                      }]}, 
                      { title: "Completed second part of JS4J", likes: 20, comments: [] }
                    ];
                    
                    var $todos = todos.map(function createPost(post) {
                        var $todo = element('div.well');
                    
                        var $like = element('a.pull-right');
                        $like.href = "#";
                        $like.addEventListener('click', function() {
                           post.likes++;
                           $value.innerHTML = post.likes;
                        });
                        
                        var $value = element('span.badge');
                        $value.innerHTML = post.likes;
                        
                        var $icon = element('span.glyphicon.glyphicon-thumbs-up');
                        
                        appendTo($like)($icon, text(' '), $value);
                        appendTo($todo)($like, text(post.title));
                        
                        if (post.comments && post.comments.length) {
                            var $subcomments = element('div');
                            appendTo($todo)(element('hr'), $subcomments);
                        
                            post.comments.map(createPost).map(appendTo($subcomments));
                        }
                        return $todo;
                    });
                    
                    var $todosContainer = document.querySelector('.todos');
                    $todos.map(appendTo($todosContainer));
    
  - id: contexts1
    name: Contexts
    title: Reusability of methods
    monitor: TodosModel._todos
    code: |
      var TodosModel = {
        _todos: [],

        addTodo: function(title) {
          TodosModel._todos.push({
            title: title,
            completed: false
          });
        }
      };

      TodosModel.addTodo("New todo");
    microtasks:
      - description: Change access to <code>_todos</code> using <code>this</code>
        hint: Substitute <code>TodosModel._todos</code> with <code>this</code>
        js: |
          this\._todos.push
    notes: |
      Remind about reusability matter that we have been talking about earlier.
      Change TodosModel to "this" in this snippet and explain similarity to Java

  - id: contexts2
    name: Contexts
    title: Contexts - caveats
    microtasks:
      - description: <code>adder1</code> should add <code>3</code> instead of <code>5</code>
        hint: Change <code>b:3</code> in <code>adder1</code>
        js_assert: |
          adder1.b === 3
      - description: Borrow <code>add</code> function from <code>adder1</code> to <code>adder2</code>
        hint: Assign <code>adder1.add</code> to <code>adder2.add</code>
        js_assert: |
          adder1.add === adder2.add
    monitor: results
    code:
      big: true
      content: |
        var results = [];
        var adder1 = {
          b: 5,
          add: function(a) {
            return a + this.b;
          }
        };
        results.push(
          adder1.add(10)
        );

        var adder2 = {
          b: 7
        };
    notes: |
      // Remind that value is resolved during execution - same is with `this` keyword.

      // Try to ask how JS knows what should `this` be resolved to?

      // Add this code

      //Borrow function
      adder2.add = adder1.add;

      results.push(
        adder2.add(10)
      );

  - id: contexts3
    name: Contexts
    title: Contexts - more caveats
    microtasks:
      - description: Assign <code>7</code> to global variable <code>b</code>
        hint: <code>window.b = 7</code>
        js_assert: |
          window.b === 7
    monitor: result
    code: |
      var adder1 = {
        b: 5,
        add: function(a) {
          return a + this.b;
        }
      };

      var justAdd = adder1.add;

      var result = "Result is " + justAdd(10);
    notes: |
      // Now ask if someone understands what happened:)

      // Introduce more confusement by writing
      window.b = 7

      // Explain what global scope is and that `this` is set to global scope if none can be found.

  - id: contexts4
    name: Contexts
    title: Contexts - even more caveats
    microtasks:
      - description: Bind context of increment using <code>bind</code> method
        hint: <code>State.increment.bind(State)</code>
        js: |
          State\.increment\.bind\(State\)
    fiddle:
      hideOutput: true
      big: true
      js: |
        var $btn = document.querySelector('.increment-btn');
        var $output = document.querySelector('.increment-output');

        var State = {
          i: 0,
          increment: function() {
            this.i++;
            console.log(this.i, State.i);
            $output.innerHTML = "this.i=" + this.i + " | State.i=" + State.i;
          }
        };
        State.increment();
        $btn.addEventListener('click', State.increment);

        document.body.appendChild($btn);
      html: |
        <html>
          <head></head>
          <body>
            <h1 class="increment-output"></h1>
            <button class="btn btn-default increment-btn">
              Increment
            </button>
          </body>
        </html>
    notes: |
      // Now ask if someone understands what happened:)
      
      // Propose to
      console.log(this) 
      // to check in which context are we

      // refactor this to sth like
      var incr = State.increment;
      $btn.addEventListener('click', incr);

      // to make it clear that we have lost context of execution

      // Ask for possible fixes:
      //  1. Wrapping in anonymous function
      //  2. Use `bind` function

  - id: contexts5
    name: Contexts
    title: Invoking function in specific context
    microtasks:
      - description: Invoke <code>increment</code> function in context of <code>result</code> with argument <code>"test"</code>
        hint: <code>increment.call(ctx, arg)</code> where <code>ctx === result</code> and <code>arg === "test"</code>
        js: |
          increment\.call\(result\s*,\s*['"]test['"]\)
      - description: Fix context of <code>increment</code> to itself.
        hint: <code>increment.bind(increment)</code>
        js: |
          increment\.bind\(increment\)
    monitor: result
    code:
      big: true
      content: |
        var result = [];
        var State1 = {
          name: 'State 1'
        };
        var State2 = {
          name: 'State 2'
        };
        var increment = function(arg1) {
          result.push("Invoking in context of " + this.name + " with argument " + arg1);
        };

        increment.call(State1, "arg1");

        increment.apply(State2, ["arg2"]);

        var fixedContext = increment.bind(State1);
        fixedContext("arg1");

        fixedContext.call(State2, "arg2");

    notes: |
      1. Describe differences between `call` and `apply`
      2. Make sure that everyone notices that after binding context .call (and .apply) doesn't matter

  - id: contexts6
    name: Contexts
    title: Other applications of <code>bind</code>
    microtasks:
      - description: Create adder of 6 and name it <code>add6</code>
        hint: use <code>add.bind("add6", 6)</code>
        js_assert: |
          add6(5) === 11
      - description: Create function that always returns result of <code>3+2</code> and call it <code>five</code>
        hint: You can bind both arguments like <code>add.bind("five", 3, 3)</code>
        js_assert: |
          five() === 5
    monitor: result
    code:
      big: true
      content: |
        var result = [];
        var add = function(a, b) {
          var sum = a + b;
          result.push(
            a + " + " + b + " = " + sum + " in context of: " + this
          );

          return sum;
        };

        add(3, 4);

        var add3 = add.bind("add3", 3);
        add3(4);
    notes: |
      Point out that everything can be used as context (even other function)

      Explain that using `bind` we can create partially applied functions.

  - id: context7
    name: Contexts
    title: Contexts and functional-style
    microtasks:
      - description: Refactor the code to use <code>forEach</code>
        hint: Invoke <code>todos.forEach</code>
        js: |
          todos\.forEach\(
    monitor: TodosView._results
    code:
      big: true
      content: |
        var TodosView = {
          _results: [],
          renderAllTodos: function(todos) {

            for (var k in todos) {
              this.renderTodo(todos[k]);
            }

          },
          renderTodo: function(todo) {
            this._results.push("Rendering todo " + todo);
          }
        };

        TodosView.renderAllTodos(["Todo 1", "Todo 2"]);
    notes: |
      // 1. Propose to jointly refactor for-in loop to functional style.
      // 2. Show how easy it is to break context.

      // Try two solutions:
      renderAllTodos: function(todos) {
        todos.forEach(function(todo) {
          this.renderTodo(todo);
        }, this);
      },
      // 2
      renderAllTodos: function(todos) {
        todos.map(this.renderTodo.bind(this));
      }

      // And show that we break two different contexts.

  - id: task-contexts
    name: Task 2
    title: "Task: Event Bus"
    text: |
        <h2>
        <span class="text-success"><span class="glyphicon glyphicon-download"></span></span>
        <a href="http://todr.me/wp-content/uploads/2014/04/eventBus.zip">EventBus tests</a>
        </h2>
        
    code:
      hideOutput: true
      big: true
      content: |
        var EventBus = {
          listenTo: function(eventName, func, context) {
            // throw Error("TODO");
          },
          trigger: function(eventName /* arguments */) {
            // throw Error("TODO");
          }
        };
        var State = {
          i: 0,
          increment: function() { this.i++; }
        };
        EventBus.listenTo(
              'increment', State.increment, State);

        EventBus.trigger('increment');
        // This should result in "1"
        console.log(State.i);
    task:
      duration: 30
      objectives:
        - In file <code>public/javascripts/eventBus.js</code> implement <code>EventBus</code> object that will trigger all listeners for specific <code>eventName</code> in proper context
      extras:
        - Pass additional arguments from <code>trigger</code> method to listeners.
        - Use <code>EventBus</code> in your application to notify View from Model.
      solution:
        name: Event Bus - solution
        title: Event Bus
        monitor: State
        code: |
          var EventBus = {
            _listeners : {},
            listenTo: function(eventName, func, context) {
              var listeners = this._listeners[eventName];
              if (!listeners) {
                this._listeners[eventName] = listeners = [];
              }

              listeners.push({
                func: func,
                ctx: context
              });
            },
            trigger: function(eventName /* arguments */) {
              var listeners = this._listeners[eventName] || [];

              //var args = arguments.slice(1);
              var args = [].slice.call(arguments, 1);

              listeners.forEach(function(listener) {
                listener.func.apply(listener.ctx, args);
              });
            }
          };
          var State = {
            i: 0,
            increment: function(amount) {
              this.i += amount;
            }
          };

          EventBus.listenTo('increment', State.increment, State);

          EventBus.trigger('increment', 5);
          // This should result in "5"
          console.log(State.i);

  - id: rest1
    name: REST
    title: REST - Representational State Transfer
    text: |
      <h2 class="text-warning">RESTful architecture constraints</h2>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Client-server
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Stateless
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Cacheable
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Layered system
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Uniform interface
      </h3>
    notes: |
      1. Client-server - we have clear separation between client and server.
         We can change any part of client code
         Or modify internals of server, or even change database
         but as long as interface is defined between them everything has to work.
      2. Stateless - Server should not store any context of client.
         Each request has to contain everything that is need by server.
      3. Cacheable - resources should defined them as cacheable.
      4. Layered system - a client cannot distinguish between end server or intermediary.
      5. Uniform interface - FUNDAMENTAL!!!
         - identification of resource / for instance URIs
         - manipulation through representations
         - self-descriptive messages - enough information to describe how to process the message
         - Hypermedia as the engine of application state (HATEOAS)
           no prior knowledge about how to interact with any application or server is required

      Example of REST architecture implementation is Web (to support session we have to pass Cookie, SessionID or something)
      But we can also build APIs on top of that.

      REST is architecture vs SOAP is a protocol.

  - id: rest2
    name: REST
    title: RESTful API Example (URLs)
    text: |
      <h2>
        <span class="glyphicon glyphicon-link text-success"></span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3>URL representing a collection of fruits</h3>
      <br>
      <h2>
        <span class="glyphicon glyphicon-link text-success"></span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3>URL representing a single fruit with id <code>apple1</code></h3>

  - id: rest3
    name: REST
    title: RESTful API Example (Methods on collection)
    text: |
      <h2>
        <span class="label label-success">GET</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Retrieve</strong> collection of fruits</h3>
      <br>
      <h2>
        <span class="label label-warning">PUT</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Replace</strong> entire collection with new one</h3>
      <br>
      <h2>
        <span class="label label-primary">POST</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Create</strong> a new entry in collection.</h3>
      <br>
      <h2>
        <span class="label label-danger">DELETE</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Delete</strong> entire collection</h3>
    notes: |
      We use POST as Create operation due to HTTP specification:
      GET - safe operation (nullipotent) - should not produce any side-effects
      POST - has side-effects
      PUT & DELETE - idempotent methods - invoking them multiple times should have same effect.

      These properties might be used by Proxies or clients implementations.

  - id: rest4
    name: REST
    title: RESTful API Example (Methods on objects)
    text: |
      <h2>
        <span class="label label-success">GET</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Retrieve</strong> details about <code>apple1</code>.</h3>
      <br>
      <h2>
        <span class="label label-warning">PUT</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Replace / Update</strong> <code>apple1</code></h3>
      <br>
      <h2>
        <span class="label label-danger">DELETE</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Remove</strong> <code>apple1</code> from collection</h3>
    notes: |
      POST (Create) operation is rarely used on specific objects.

  - id: rest5
    name: REST
    title: RESTful JSON API Example
    text:
      <h2>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="https://apigee.com/embed/console/soundcloud">Soundcloud API Console</a>
        &nbsp;
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm">Postman 4 Chrome</a>
        &nbsp;
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="https://addons.mozilla.org/pl/firefox/addon/restclient/">REST Client 4 Firefox</a>
      </h2>
    monitor: result
    code:
      big: true
      content: |
        var result = {};
        // GET https://api.github.com/users
        result.collection = [
          {
            "login": "mojombo",
            "id": 1,
            "html_url": "https://github.com/mojombo",
            "type": "User",
            "site_admin": true
          }
        ];

        // GET https://api.github.com/users/tomusdrw
        result.tomusdrw = {
          "login": "tomusdrw",
          "id": 581548,
          "html_url": "https://github.com/tomusdrw",
          "type": "User",
          "site_admin": false,
          "name": "Tomasz Drwięga",
        };
    notes: |
      First call returns collection of users (but of course is limited)
      Audience can open the link in browser - it should show the content

      Second call returns a single user out of collection, with more detailed information (like "name")
    footer: |
      <br>
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="rest" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">Designing and implementing professional REST webservices</span> training
        </label>
      </h2>
    script: *trainingStats

  - id: ajax1
    name: AJAX
    title: Asynchronous JavaScript and XML
    microtasks:
      - description: Console.log only first property of <code>data</code> object
        hint: Try with <code>data['Hello!']</code>
        js: |
          console\.log\(data\[['"]Hello!['"]\]\)
    monitor: promise
    code:
      small: true
      async: true
      content: |
        var promise = $.ajax({
          url: '/js/example.json',
          success: function(data) {
            console.log(data);
          }
        });
    notes: |
      Requesting single file (asynchronously) - remind about event-driven design in JS
      Mention something about one-threaded enviroment.

      Tell that output is updated with delay to show asynchronous nature.

      Mention that AJAX calls cannot be made across different domains.

  - id: ajax2
    name: AJAX
    title: Using jQuery to make AJAX calls
    microtasks:
      - description: From first promise pass login instead of <code>data</code> in <code>user</code> property.
        hint: "Try out with <code>user: data.login</code>"
        js: |
          user:\s*data\.login
      - description: Fetch data about user <code>purplecode</code> instead of <code>tomusdrw</code>
        hint: Change URL passed to ajax function
        js: |
          url:.+?users/purplecode
    monitor: promise
    code:
      async: true
      content: |
        var promise = $.ajax({
          url: 'https://api.github.com/users/tomusdrw'
        }).then(function(data){
          return {
            user: data
          };
        }).then(function(data){
          console.log(data);
          return data;
        });

        promise.loading = "...";
    notes: |
      Explain that you didn't lie guys.
      jQuery automagically switches to JSONp; it uses a different mechanism (explain if there are questions)

      Say something about promises and how do they work.
  - id: nodejs
    name: Node.js
    title: Node.js - <code>http</code> module

    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var http = require('http');

        var server = http.createServer(function (req, res) {
          res.end("Hello world");
        });

        server.listen(process.env.PORT || 3000, function(){
            console.log("Running on " + process.env.PORT);
        });
    iframe: true
  - id: connectjs
    name: Connect.js
    title: Connect.js
    text: |
      <h2 class="text-muted">
        <a href="http://www.senchalabs.org/connect/">Connect</a> is a middleware framework for node.
      </h2>

    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var http = require('http'),
            connect = require('connect');

        var app = connect()
        .use(connect.logger('dev'))
        .use(function(req, res) {
          res.end("Hello World!");
        });

        http.createServer(app).listen(process.env.PORT || 3000, function(){
            console.log("Listening on " + (process.env.PORT || 3000));
        });
    iframe: true
  - id: connectjs2
    name: Connect.js
    title: Connect.js - Middleware?
    text: |
      <h2 class="text-muted">
        WTF is middleware?
      </h2>

    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var http = require('http'),
            connect = require('connect');

        var app = connect()
        .use(function(req, res, next){
          if (Math.random() < 0.5) {
            next();
          } else {
            res.end("Busted!");
          }
        })
        .use(function(req, res) {
          res.end("Hello World!");
        });

        http.createServer(app).listen(process.env.PORT || 3000, function(){
            console.log("Listening on " + (process.env.PORT || 3000));
        });
    iframe: true
  - id: expressjs
    name: Express.js
    title: Express.js
    text: |
      <h2 class="text-muted">
        <a href="http://expressjs.com/">Express</a> - web application framework for node
      </h2>
    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var express = require('express'), 
            http = require('http'), path = require('path');

        var app = express();
        app.set('port', process.env.PORT || 3000);
        app.set('views', path.join(__dirname, 'views'));
        app.set('view engine', 'jade');
        app.use(app.router);

        app.get('/', function(req, res) {
            res.send("Hello world!");
        });

        http.createServer(app).listen(app.get('port'), function(){
            console.log('Express server listening on port ' + app.get('port'));
        });
    iframe: true
  - id: expressjs-app
    name: Express.js
    title: Express.js - Full app
    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var express = require('express'), 
            http = require('http'), path = require('path');

        var app = express();
        app.set('port', process.env.PORT || 3000);
        app.set('views', path.join(__dirname, 'views'));
        app.set('view engine', 'jade');
        app.use(express.favicon());
        app.use(express.logger('dev'));
        app.use(express.json());
        app.use(express.urlencoded());
        app.use(express.methodOverride());
        app.use(express.cookieParser('your secret here'));
        app.use(express.session());
        app.use(express.bodyParser());
        app.use(app.router);
        app.use(express.static(path.join(__dirname, 'public')));

        app.get('/', function(req, res) {
            res.send("Hello world!");
        });

        http.createServer(app).listen(app.get('port'), function(){
            console.log('Express server listening on port ' + app.get('port'));
        });
    iframe: true
  - id: expressjs-api
    name: Express.js
    title: Express.js - API
    code:
      hideOutput: false
      language: express
      run: false
      big: true
      content: |
        var express = require('express'), 
            http = require('http'), path = require('path');

        var app = express();
        app.set('port', process.env.PORT || 3000);
        app.set('views', path.join(__dirname, 'views'));
        app.set('view engine', 'jade');
        app.use(app.router);

        var model = {
          a: 5
        };
        app.get('/', function(req, res) {
            res.header('Access-Control-Allow-Origin', '*');
            res.send(model);
        });

        http.createServer(app).listen(app.get('port'), function(){
            console.log('Express server listening on port ' + app.get('port'));
        });
    iframe: true

  - id: task-rest
    name: Task 3
    title: "Task: Implement REST API in Express.js and use it for persistence"
    task:
      duration: 60
      objectives:
        - Implement simplified REST API for Todos or Facebook Stream (Get list, Replace list)
        - Consume API in your app
      extras:
        - Implement and use full REST API for Todos or Facebook Stream (Get list, Get Single, Update, Create, Delete)
      solution:
        name: REST API - Solution
        title: REST API
        code:
          hideOutput: false
          language: express
          run: false
          big: true
          content: |
            var express = require('express'), 
                http = require('http'), path = require('path');

            var app = express();
            app.set('port', process.env.PORT || 3000);
            app.set('views', path.join(__dirname, 'views'));
            app.set('view engine', 'jade');
            app.use(express.json());
            app.use(app.router);
            app.use(function(req, res, next){
              res.header('Access-Control-Allow-Origin', '*');
              next();
            });

            var todos = ['Hello world!'];
            app.get('/todos', function(req, res) {
                res.send(todos);
            });
            app.put('/todos', function(req, res){
                todos = req.body;
                res.send(todos);
            });
            app.post('/todos', function(req, res){
                todos.push(req.body);
                res.send(todos);
            });

            http.createServer(app).listen(app.get('port'), function(){
                console.log('Express server listening on port ' + app.get('port'));
            });
        iframe: true

  - id: demo-reference
    name: Demo (Vanilla)
    title: Vanilla.js implementation

    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://vanilla-js.com/" target="js">Vanilla.js</a>
      </h4>
    fiddle:
      pure: true
      big: true
      js: &vanillacode |
        var FakeStorage = {
          addTodo: function(todo, callback) { callback(todo); },
          updateTodo: function(todo, callback) { callback(todo); },
          getTodos: function(callback) { callback([]); }
        };
        var Storage = {
            addTodo: function(todo, callback) {
                $.ajax({
                    method: 'post',
                    url: '/todos',
                    data: JSON.stringify(todo),
                    contentType: 'application/json; charset=utf-8'
                }).then(callback);
            },
            updateTodo: function(todo, callback) {
                return $.ajax({
                  method: 'put',
                  url: '/todos/' + todo.id,
                  data: JSON.stringify(todo),
                  contentType: 'application/json; charset=utf-8'
                }).then(callback);
            },
            getTodos: function(callback) {
                $.get('/todos').then(function(todos) {
                    callback(todos);
                });
            }
        };

        var TodosModel = {
          listener: null,
          _todos: [],
          _hideCompleted: false,
          _storage: FakeStorage,

          initialize: function() {
            this._storage.getTodos(function(todos) {
              this._todos = todos;
              this._triggerReset();
            }.bind(this));
          },
          addTodo: function(title) {
            var todo = {
              title: title,
              completed: false
            };
            this._storage.addTodo(todo, function() {
              this._todos.push(todo);
              this.listener({
                name: 'add',
                data: todo
              });
            }.bind(this));
          },
          toggleCompleted: function(todo, completed) {
            todo.completed = completed;
            return this._storage.updateTodo(todo, function() {
              console.log("Todo updated", todo);
            });
          },
          getTodos: function() {
            return this._todos.filter(function(todo){
              return !this._hideCompleted || !todo.completed;
            }, this);
          },
          setHideCompleted: function(hideCompleted) {
            this._hideCompleted = hideCompleted;
            this._triggerReset();
          },
          _triggerReset: function() {
            this.listener({
              name: 'reset',
              data: this.getTodos()
            });
          }
        };

        var TodosView = {
          initialize: function() {
            var $input = document.querySelector('input.todo-add-input');
            var $form = document.querySelector('form.todo-add-form');

            $form.addEventListener('submit', function(ev) {
                ev.preventDefault();
                if (!$input.value) { return; }
                TodosModel.addTodo($input.value);
                $input.value = '';
            });

            var $hideCompleted = document.querySelector('input.todo-hide-completed');
            $hideCompleted.addEventListener('change', function() {
              TodosModel.setHideCompleted($hideCompleted.checked);
            });
          },

          renderTodo: function(todo) {
            var $todosContainer = document.querySelector('.todos');

            $todo = document.createElement('label');
            $todo.className = 'list-group-item';

            $checkbox = document.createElement('input');
            $checkbox.type = 'checkbox';
            $checkbox.checked = todo.completed;

            $checkbox.addEventListener('change', function(){
              TodosModel.toggleCompleted(todo, $checkbox.checked);
            });

            $todo.appendChild($checkbox);
            $todo.appendChild(document.createTextNode(" " + todo.title));

            $todosContainer.appendChild($todo);
          },
          renderAll: function(todos) {
            document.querySelector('.todos').innerHTML = '';
            todos.forEach(function(todo) {
              this.renderTodo(todo);
            }, this);
          },
          listener: function(ev) {
            if (ev.name === 'add') {
              this.renderTodo(ev.data);
            } else if (ev.name === 'reset') {
              this.renderAll(ev.data);
            }
          }
        };

        // Assign listener
        TodosModel.listener = TodosView.listener.bind(TodosView);

        TodosModel.initialize();
        TodosView.initialize();

        TodosModel.addTodo("New todo 1");
        TodosModel.addTodo("New todo 2");
      html: |
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main">
              <div class="todos list-group"></div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" class="todo-hide-completed">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline todo-add-form">
                <input type="text" class="form-control todo-add-input">
                <button class="btn btn-default todo-add-button">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
          </body>
        </html>
    notes: |
      Tell why there is a fake storage.

  - id: demo-vanilla
    name: Demo (Vanilla)
    title: Backbone.js vs Vanilla.js

    left:
      code: 
        big: true
        language: javascript-norun
        content: &backbonecode |
          var Todo = Backbone.Model.extend({
              defaults: {
                  title: "",
                  completed: false
              }
          });
          var Todos = Backbone.Collection.extend({
              url: '/todos',
              model: Todo,
              _hideCompleted: false,
              initialize: function() {
                  this.fetch({
                      reset: true
                  });
              },
              addTodo: function(title) {
                  this.create({
                      title: title,
                      completed: false
                  });
              },
              getTodos: function() {
                  if (this._hideCompleted) {
                      return this.where({completed: false});
                  }
                  return this.slice();
              },
              setHideCompleted: function(hideCompleted) {
                  this._hideCompleted = hideCompleted;
                  this.trigger('change:hideCompleted');
              }
          });
          var TodoView = Backbone.View.extend({
              tagName: 'label',
              className: 'list-group-item',
              events: {
                  'change input': '_changeCompleted'
              },
              template: _.template(
                '<input type="checkbox" <% if (completed) { %> checked <% } %>> <%= title %>'),
              initialize: function() {
                  this.listenTo(this.model, 'change', this.render);
                  this.render();
              },
              _changeCompleted: function(ev) {
                  var completed = ev.currentTarget.checked;
                  this.model.save({
                      completed: completed
                  });
              },
              render: function() {
                  this.$el.empty();
                  var htmlContent = this.template(this.model.attributes);
                  this.$el.append(htmlContent);
                  return this;
              }
          });
          var TodosView = Backbone.View.extend({
              el: '.main-container',
              events: {
                  'submit .todo-add-form': "_addTodo",
                  'change .todo-hide-completed': '_changeHideCompleted'
              },
              initialize: function() {
                  this.listenTo(this.collection, "reset", this.render);
                  this.listenTo(this.collection, "add", this._appendOne);
                  this.listenTo(this.collection, "change:hideCompleted", this.render);
              },
              _addTodo: function(ev) {
                  ev.preventDefault();
                  var $addTitle = this.$('.todo-add-input');
                  var title = $addTitle.val();
                  $addTitle.val("");
                  this.collection.addTodo(title);
              },
              _changeHideCompleted: function(ev) {
                  var checked = ev.currentTarget.checked;
                  this.collection.setHideCompleted(checked);
              },
              _appendOne: function(todo) {
                  var todoView = new TodoView({
                      model: todo
                  });
                  this.$('.todos').append(todoView.$el);
              },
              render: function() {
                  this.$('.todos').empty();
                  this.collection.getTodos().forEach(function(todo){
                      this._appendOne(todo);
                  }, this);
                  return this;
              }
          });
          var todos = new Todos();
          var view = new TodosView({
              collection: todos
          });
          view.render();

          todos.addTodo("New todo 1");
          todos.addTodo("New todo 2");

    right:
      code:
        big: true
        language: javascript-norun
        content: *vanillacode


    notes: |
      Note that there is no Storage implementation cause in Backbone we have it out-of-the box.

      Main advantange over vanilla.js is that every developer will right the code in more-less the same manner.
      Code is also reusable - we can define other todos list right away.

      Backbone adds skeleton and some wireframe to your projects.

  - id: demo-backbone
    name: Demo (Backbone)
    title: Backbone.js implementation
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://backbonejs.org" target="js">Backbone.js</a>
      </h4>
    notes: |
      Note that there is no Storage implementation cause in Backbone we have it out-of-the box.

      Main advantange over vanilla.js is that every developer will right the code in more-less the same manner.
      Code is also reusable - we can define other todos list right away.

      Backbone adds skeleton and some wireframe to your projects.
    fiddle:
      pure: true
      big: true
      js: *backbonecode
      html: |
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main">
              <div class="todos list-group"></div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" class="todo-hide-completed">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline todo-add-form">
                <input type="text" class="form-control todo-add-input">
                <button class="btn btn-default todo-add-button">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
            <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script>
            <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js"></script>
          </body>
        </html>
    footer: |
      <br>
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="backbone" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">Building JavaScript Apps with Backbone.js</span> training
        </label>
      </h2>
    script: *trainingStats


  - id: demo-angular
    name: Demo (Angular)
    title: Angular.js implementation
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://angularjs.org/" target="js">Angular.js</a>
      </h4>
    notes: |
      - Less JS code - Better! (without mocking $http it's only 59 lines)
      - Clear separation between Presentation and Model
      - Automatic two-way binding between DOM and JS
      - No DOM in JS (any)
      - More HTML, but no strange CSS classes need only to reference element in JS
    footer: |
      <br>
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="angular" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">Building JavaScript Apps with Angular.js</span> training
        </label>
      </h2>
    script: *trainingStats
    fiddle:
      pure: true
      big: true
      js: |
        var todos = angular.module('todos', []);

        // Controller (dom-model binding)
        todos.controller('TodoCtrl', ['$scope', 'TodosService', function($scope, TodosService) {

            $scope.newTodoTitle = "";
            $scope.hideCompleted = false;

            var addTodo = function(title) {
              TodosService.addTodo({
                  title: title,
                  completed: false
              }).then(function(todo) {
                  $scope.todos.push(todo.data);
                  console.log("Todo added.");
              });
            };

            TodosService.getTodos().then(function(todos) {
                $scope.todos = todos.data;

                addTodo('New todo 1');
                addTodo('New todo 2');
            });

            $scope.addTodo = function() {
                var title = $scope.newTodoTitle;
                $scope.newTodoTitle = "";
                addTodo(title);
            };

            $scope.updateTodo = function(todo) {
                TodosService.updateTodo(todo).then(function() {
                    console.log("Todo updated.");
                });
            };

            $scope.getTodosFilter = function() {
                var filter = {};
                !$scope.hideCompleted || (filter['completed'] = false);
                return filter;
            };
        }]);

        // Service (abstraction over http)
        todos.factory('TodosService', ['$http', function($http) {
            return {
                addTodo: function(todo) {
                    return $http.post('/todos', todo);
                },
                updateTodo: function(todo) {
                    return $http.put('/todos/'+todo.id, todo);
                },
                getTodos: function() {
                    return $http.get('/todos');
                }
            };
        }]);

        // We can override services (even internal ones)
        todos.config(function($provide){
          $provide.factory('$http', ['$q', function($q) {
            return {
                get: function() { return $q.when({data: []}); },
                post: function(url, object) { return $q.when({data: object}); },
                put: function(url, object) { return $q.when({data: object}); }
            };
          }]);
        });

      html: |
        <!DOCTYPE html>
        <html ng-app="todos" data-framework="angularjs">
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main" ng-controller="TodoCtrl">
              <div class="list-group">
                <label class="list-group-item" 
                  ng-repeat="todo in todos | filter:getTodosFilter()">
                  <input type="checkbox" ng-model="todo.completed" ng-change="updateTodo(todo)">
                  {{ todo.title }}
                </label>
              </div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" ng-model="hideCompleted">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline" ng-submit="addTodo()">
                <input type="text" class="form-control" ng-model="newTodoTitle">
                <button class="btn btn-default">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
            <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular.min.js"></script>
          </body>
        </html>

  - id: demo-node1
    name: Demo (Node.js)
    title: Node.js + Mongo DB server implementation
    text: |
        <h4>
          <span class="glyphicon glyphicon-new-window text-muted"></span>
          <a href="http://expressjs.com/">Express.js - web application framework for node.js</a>
        </h4>
        <h4>File <code>app.js</code></h4>
    code:
        big: true
        hideOutput: true
        language: javascript-norun
        content: |
          var express = require('express');
          var routes = require('./routes');
          var http = require('http');
          var path = require('path');

          var app = express();

          // all environments
          app.set('port', process.env.PORT || 3000);
          app.set('views', path.join(__dirname, 'views'));
          app.set('view engine', 'jade');
          app.use(express.favicon());
          app.use(express.logger('dev'));
          app.use(express.json());
          app.use(express.urlencoded());
          app.use(express.methodOverride());
          app.use(app.router);
          app.use('/assets', express.static(path.join(__dirname, 'public')));

          app.get ('/', routes.index);
          app.get ('/todos', routes.getTodos);
          app.post('/todos', routes.createTodo);
          app.put ('/todos/:id', routes.updateTodo);
    
          http.createServer(app).listen(app.get('port'), function(){
            console.log('Express server listening on port ' + app.get('port'));
          });
    notes: |
      Teaser about Server-Side JS.
      - You can reuse whole know-how from client side. 
      - Have the same tooling for Server and Client.
      - Reuse code between server and client.

  - id: demo-node2
    name: Demo (Node.js)
    title: Node.js + Mongo DB server implementation
    footer: |
        <br>
        <h2 class="checkbox">
          <label>
            <input type="checkbox" class="training-checkbox" data-training="node" style="width:25px;height:25px">
            &nbsp; I would be interested in <span class="text-primary">Building fullstack JavaScript Apps with Node.js</span> training
          </label>
        </h2>
        <h2 class="checkbox">
          <label>
            <input type="checkbox" class="training-checkbox" data-training="nosql" style="width:25px;height:25px">
            &nbsp; I would be interested in <span class="text-primary">Implementing persistence with NoSQL Databases</span> training
          </label>
        </h2>
    script: *trainingStats
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://expressjs.com/">Express.js - web application framework for node.js</a>
      </h4>
      <h4>File <code>routes/index.js</code></h4>
    code:
      big: true
      hideOutput: true
      language: javascript-norun
      content: |
          var MongoClient = require('mongodb').MongoClient;
          // Connect to the db
          var mongoTodos = null;
          MongoClient.connect("mongodb://localhost:27017/todos", function(err, db) {
              if (err) { throw err; }
              mongoTodos = db.collection('todos');
          });

          exports.index = function(req, res){
            res.render('index');
          };

          exports.getTodos = function(req, res) {
              mongoTodos.find().toArray(function(err, todos){
                  res.send(todos);
              });
          };

          exports.createTodo = function(req, res) {
              var todo = req.body;
              mongoTodos.insert(todo, {w:1}, function(err, result) {
                  res.send(result[0]);
              });
          };

          exports.updateTodo = function(req, res) {
              var todo = req.body;
              var id = parseInt(req.params.id, 10);
              todo._id = id;
              mongoTodos.update({
                  _id: id
              }, todo, function(err, updatedTodo){
                  res.send(updatedTodo[0]);
              });
          };
    notes: |
      Tell something about Mongo.DB - JSON document store.
      Make sure that everyone knows that it is Node.js and Express framework.

  - id: websockets
    name: WebSockets
    title: Server Push
    text: |
      <div>
        <h2>
          <span class="text-success"><span class="glyphicon glyphicon-ok"></span></span>
          Polling
        </h2>
        <h2>
          <span class="text-success"><span class="glyphicon glyphicon-ok"></span></span>
          Long polling
        </h2>
        <h2>
          <span class="text-success"><span class="glyphicon glyphicon-ok"></span></span>
          Pushlet
        </h2>
        <h2>
          <span class="text-success"><span class="glyphicon glyphicon-ok"></span></span>
          Websockets
        </h2>
      </div>
    
  - id: websockets2
    name: WebSockets
    title: Socket.io - Server
    iframe: true
    code:
      big: true
      language: express
      content: |
        var express = require('express'), 
            http = require('http'), socketio = require('socket.io'),
            path = require('path');

        var app = express();
        app.set('port', process.env.PORT || 3000);
        app.set('views', path.join(__dirname, 'views'));
        app.set('view engine', 'jade');
        app.use(app.router);

        var clients = 0;
        app.get('/', function(req, res) {
            res.send("Hello world. We have " + clients + " clients.");
        });

        var server = http.Server(app);
        var io = socketio.listen(server);
        io.on('connection', function(socket) {
          clients++;

          socket.broadcast.emit('clients', clients);
          socket.emit('clients', clients);

          socket.on('disconnect', function() {
            clients--;
          });
        });

        server.listen(app.get('port'), function() {
            console.log('Express and Socket.IO server listening on port ' + app.get('port'));
        });

  - id: websockets3
    name: WebSockets
    title: Socket.io - Client
    fiddle:
      active: js
      js: |
          var socket = io.connect('http://todr.me:1550');
          socket.on('clients', function (data) {
            document.querySelector('.clients').innerHTML = data;
          });
      html: |
        <html>
        <head>
          <title>Socket.io</title>
          <script src="http://todr.me:3020/socket.io/socket.io.js"></script>
        </head>
        <body>
        <h1>Number of clients: <span class="label label-primary clients"></span></h1>
        </body>
        </html>

  - id: task-sockets
    name: Task 4
    title: "Task: Socket.io integration"
    task:
        duration: 30
        objectives:
          - Add live updates to your application.
        extras:
          - Display number of users on page
          - Create live chat

  - id: comparison
    name: Comparison
    title: JS Comparison operators 
    monitor: results
    code: |
      var results = {
        "strings are equal using ==": "asd" == "asd",
        "strings are equal using ===": "asd" === "asd",
        //
        "numbers are equal using ==": 5 == "5",
        "numbers NOT equal using ===": 5 === "5",
        //
        "using == is bad": "" == 0,
        "so always use ===": "" !== 0
      };

    notes: |
      Explain the difference between == and === and their counterparts != and !==.
      Point out that there is a warning near code.

  - id: specialValues1
    name: Special Values
    title: JS Special values 
    monitor: specialValues
    code: |
      var specialValues = {
        "null": null,
        "undefined": undefined,
        "Not a number": NaN
      };

      specialValues["true"] = "undefined" in specialValues;
      specialValues["false"] = "undefined2" in specialValues;

      specialValues["true again"] = specialValues['undefined'] === specialValues['undefined2'];
      console.log(specialValues);
    notes: |
      Tell the difference between undefined and null.

      Explain why you shouldnt use undefined on your own.

  - id: specialValues2
    name: Special Values
    title: Special Values - Comparison
    monitor: results
    code:
      big: true
      content: |
        var results = {
          obvious: {
            "true !=(=) undefined": true != undefined,
            "true !=(=) null": true != null
          },
          makesSense: {
           "undefined == null": undefined == null,
           "isNaN == isNaN": isNaN == (0 + undefined)
          },
          stupid: {
            "false ==(=) undefined": false == undefined,
            "false ==(=) null": false == null
          },
          evenWorse: {
            "true ==(=) !undefined": true == !undefined,
            "true ==(=) !null": true == !null
          }
        };
    notes: |
      Fiddle around with questions
      tell about isNaN()

  - id: specialComparisons
    name: Special Comparisons
    title: Mind-bogglers
    text: |
      <h3>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://wtfjs.com/" target="ext">WTF JS?</a>
        &nbsp;
        <span class="glyphicon glyphicon-film text-muted"></span>
        <a href="https://www.destroyallsoftware.com/talks/wat" target="ext">WAT!?</a>
      </h3>
      <br>
    monitor: results
    code:
      content: |
        var results = {
          "[] == ![]": [] == ![],
          "{} == !{}": {} == !{},
          "[1] == '1'": [1] == "1",
          "[1,2,3] == [1,2,3]": [1,2,3] == [1,2,3],
          "[1,2,3] < [1,2,5]": [1,2,3] < [1,2,5],
          "Math.min() < Math.max()": Math.min() < Math.max()
        };
    notes: |
      Tell that there are plenty of such strange behaviour examples on wtfjs

  - id: task-survey
    name: Task 5
    title: "Task: Complete the survey"
    text: |
      <h2>
      <span class="glyphicon glyphicon-export text-muted"></span>
        <a href="https://docs.google.com/forms/d/1UeSFfv86eyG7HPLAWA1bW7NLjYphWhgj7HX8Kwt6mVk/viewform">
          Survey @ Devmeetings
        </a>
      </h2>
      <h2>
      <span class="glyphicon glyphicon-export text-muted"></span>
        <a href="http://todr.me:5000">
          Survey @ NSN
        </a>
      </h2>
    task:
      duration: 10
      objectives:
        - Complete the survey under link above
      extras:
        - Provide very detailed answers to open-ended questions

  - id: mixins1
    name: Mixins
    title: "Teaser: Mixins"
    monitor: result
    code: |
      var rect = {
        a: 5,
        b: 3
      };
      var area = function(rect) {
        return rect.a * rect.b;
      };

      var result = area(rect);
    notes: |
      // Let's now try to add this behaviour to all rectangles as a method.
      // How can we do this? In Java we would just create a class.
      // You may refactor the code to something like this:
      
      var rect = {
        a: 5,
        b: 3
        area: function() {
          return this.a * this.b;
        }
      };

      var result = rect.area();

      // But ask how to create another rectangle now?
  - id: mixins2
    name: Mixins
    title: "Teaser: Mixins"
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="https://github.com/dilvie/stampit">Stampit - library for composing objects</a>
      </h4>
    monitor: results
    code:
      big: true
      content: |
        var mixin = function(destination /* args */) {
          [].slice.call(arguments, 1).forEach(function(source) {
            for (var k in source) {
              destination[k] = source[k];
            }
          });
          return destination;
        };


        // ✂---------------





        var rectFunctions = {
          area: function() {
            return this.a * this.b;
          }
        };

        var rect1 = mixin({a: 5, b: 3}, rectFunctions);
        var rect2 = mixin({a: 4, b: 4}, rectFunctions);

        var results = {
          rect1: rect1.area(),
          rect2: rect2.area()
        };




        // ---------------
    notes: |
      // Ask if any1 knows what [].slice.call means. Explain.

      // We can easily add for instance "toString" method
      var rectFunctions = {
        area: function() {
            return this.a * this.b;
        },
        toString: function() {
            return "Rect(" + this.a + ", " + this.b + ")";
        }
      };


  - id: inheritance1
    name: Inheritance
    title: "Teaser: Inheritance"
    monitor: results
    code:
      big: true
      content: |
        var Rect = function(a, b) {
          this.a = a;
          this.b = b;
        };
        Rect.prototype = {
          area: function() {
            return this.a * this.b;
          }
        };

        var rect1 = new Rect(5, 3);
        var rect2 = new Rect(4, 4);

        var results = {
          rect1: rect1.area(),
          rect2: rect2.area()
        };

    notes: |
      JS does have objects in classical sense (with "new" operator),
      but inheritance is done in different way.

      Actually you can implement class inheritance with prototype mechanism available in JS.

      Analyze this example. And say that prototype is just an object with common properties / methods.
      Function with prototype is a class definition - function is a constructor

  - id: inheritance2
    name: Inheritance
    title: "Teaser: Inheritance"
    monitor: results
    code:
      big: true
      content: &inheritanceCode |
        var Rect = function(a, b) {
          this.a = a;
          this.b = b;
        };
        Rect.prototype = {
          area: function() { return this.a * this.b; }
        };

        var Square = function(a) {
          this.a = a;
          this.b = a;
        };
        Square.prototype = new Rect(1, 1);

        var results = {
          sq1: new Square(5).area(),
          sq2: new Square(4).area()
        };
    notes: |
      We can use existing object as a prototype for newly created ones.
      When accessing property / invoking method JS is searching for properties in current object and then in it's prototype and so on.

  - id: inheritance3
    name: Inheritance
    title: "Teaser: Inheritance"
    left:
      text: |
        <div>
          <a href="http://pl.tinypic.com?ref=qzfb00" target="_blank">
            <img src="http://i41.tinypic.com/qzfb00.png" border="0" alt="Image and video hosting by TinyPic">
          </a>
        </div>
        <br>
      monitor: square;
      code:
        hideOutput: true
        content: |
          var square = { //Type: Square
            a: 4,
            b: 4,
            __proto___: { //Type: Rect
              a: 1,
              b: 1,
              __proto___: { //Type: Object
                area: "function(){ return this.a * this.b; }",
                __proto___: "// Type: Object.prototype"
              }
            }
          };
    right: 
      code: 
        big: true
        hideOutput: true
        content: *inheritanceCode
    footer: |
      <br>
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="oojs" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">Object Oriented JavaScript</span> training
        </label>
      </h2>
    script: *trainingStats

  - id: ending
    name: Ending
    title: How do you like JS?
    text: |
      <div class="text-center">
        <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
          <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
        </a>
      </div>
      <h3 class="text-right">
        <span class="icon-mail text-muted"></span>
        <a href="mailto:tomasz.drwiega@gmail.com">tomasz.drwiega@gmail.com</a>
      </h3>
      <h3 class="text-right">
        <span class="icon-github text-muted"></span> <a href="https://github.com/tomusdrw" target="profile">github/tomusdrw</a>
        &nbsp;
        <span class="icon-google-plus text-muted"></span> <a href="https://plus.google.com/+TomaszDrwi%C4%99ga" target="profile">+Tomasz Drwięga</a>
        &nbsp;
        <span class="icon-linkedin text-muted"></span> <a href="http://www.linkedin.com/in/tomaszdrwiega" target="profile">in/Tomasz Drwięga</a>
      </h3>
     



  # Demo of applications in different implementations

  # Teaser about mixins, prototype inheritance etc
