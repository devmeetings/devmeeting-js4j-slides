---
title: JavaScript For Java Developers
trainersSecret: 123asd
slides:
  - id: opening
    name: Hello World
    title: JS 4 Java Devs
    text:
        >
        <h2>Devmeetings rocks!</h2>
        <div class="text-center">
          <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
            <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
          </a>
        </div>
    notes:
  - id: setup
    name: Environment
    text: |
        <h2>By now you should have following software installed.</h2>
        <h3>
          <span class="glyphicon glyphicon-ok text-success"></span>
          GIT
        </h3>
        <h3>
          <span class="glyphicon glyphicon-ok text-success"></span>
          Node.js
        </h3>
        <h3>
          <span class="glyphicon glyphicon-ok text-success"></span>
          Play! Framework
        </h3>
        <h3>
          <span class="glyphicon glyphicon-ok text-success"></span>
          Sublime Text
        </h3>
        <h3>
          <span class="glyphicon glyphicon-ok text-success"></span>
          Eclipse
        </h3>
        <br>
        <h4 class="text-muted">If you are missing something approach me during break</h4>

  - id: run
    name: Run
    title: Run Forest, Run!
    text: |
        <h3>Invoke in console:</h3>
        <pre><code>$ play run

        [info] Loading project definition from /share/public_html/devmeetings/Todos/project
        [info] Set current project to Todos (in build file:/share/public_html/devmeetings/Todos/)

        --- (Running the application from SBT, auto-reloading is enabled) ---

        [info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

        (Server started, use Ctrl+D to stop and go back to the console...)
        </code></pre>
        <h3>Open <a href="http://localhost:9000" target="page">localhost:9000</a> <span class="glyphicon glyphicon-new-window text-muted"></span> </h3>

  - id: basics1
    name: JS Basics (1)
    title: Variables and Literals
    code:
      small: true
      content: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];
    monitor: todos
    notes: |
        0. JS is:
          * interpreted
          * dynamically typed
          * awesome
        1. Keyword `var`
        2. Assignment
        3. String literal, Array literal

        - Say something about auto-execution
        - Show how to use object inspector

  - id: basics2
    name: JS Basics (2)
    title: Methods
    code:
      small: true
      content: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        console.log(todos);
    monitor: todos
    notes: |
        0. Invoking method
        1. Say about some global variables that are out there
          - console
          - window (browser)
          - document (browser)
        2. Mention something about history of JS - browser/server
        3. Opening Chrome Dev Tools / Firebug:
          - F12 / Ctrl+Shift+I
          - Go to "Console" tab.
          - Show where to search for errors
          - Mention about Debugging

  - id: basics3
    name: JS Basics (3)
    title: Simple loop (C-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var i=0; i<todos.length; i++) {
          console.log(i, todos[i]);
        }
    monitor: todos
    notes: |
        1. Getting property of object `todos.length`
        2. `[]` access operator

  - id: basics4
    name: JS Basics (4)
    title: Simple loop (Java-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var k in todos) {
          console.log(k, todos[k]);
        }
    monitor: todos
    notes: |
        0. Point out difference to Java loop
        1. Notice a difference in naming
        2. `[]` access operator
        3. Mention something about going through **object** properties

  - id: dom0
    name: DOM
    title: Document Object Model (DOM)
    text: |
        <div class="text-center">
          <figure>
          <a href="http://watershedcreative.com/naked/html-tree.html" target="dom">
            <img src="http://watershedcreative.com/naked/img/dom-tree.png" />
          </a>
          <figcaption>
            <address>
              Source: 
                <a href="http://watershedcreative.com/naked/html-tree.html" target="dom">
                  http://watershedcreative.com/naked/html-tree.html
                </a>
                <span class="glyphicon glyphicon-new-window text-muted"></span>
            </address>
          </figcaption>
          </figure>
        </div>
    notes: |
        1. Ask about knowledge of DOM
        2. Explain some basics and relation to XML

  - id: dom1
    name: HTML5
    title: Minimal HTML5 webpage
    fiddle:
      active: html
      pure: true
      html: |
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Hello World</title>
              <link rel="stylesheet" href="css/bootstrap.css">
            </head>
            <body>
              <h1>Hello world</h1>
              <!-- page content -->
              <script src="//code.jquery.com/jquery.js"></script>
              <script src="js/bootstrap.js"></script>
            </body>
          </html>
    notes: |
        Talk sth about frameworks like TwitterBootstrap.
        Other examples: Foundation,
        Grid systems: Skeleton, HTML5 Boilerplate, LESS Framework

  - id: dom2
    name: Accessing DOM (1)
    title: Hello DOM
    monitor: content
    code:
      small: true
      content: |
        var h1 = document.querySelector(".main-content h1");
        h1.innerText += "...";

        var content = h1.innerHTML;

    notes: |
        Say about accessing DOM and JavaScript representation of DOM

        Encourage ppl to play with content inside slide to see that more "..." is appended each time.

  - id: dom3
    name: Accessing DOM (2)
    title: jQuery style
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://jquery.com/" target="jquery">What is jQuery?</a>
      </h4>
    monitor: content
    code:
      small: true
      content: |
        var $h1 = $('.main-content h1');
        $h1.text($h1.text() + "...");

        var content = $h1.html();
    notes: |
      Mention that this way might be more familiar to some developers.
      Explain that jQuery is great library to manipulate DOM,
      and it makes perfect sense to use it because it hides differences 
      between old web browsers.

      However rest of slides will be using vanilla JS to simplify syntax.

      Explain why we are using variables with such naming ($h1)
  - id: dom4
    name: Accessing DOM (3)
    title: Creating DOM elements
    monitor: link
    fiddle: 
      js: |
        var d = document;
        var $link = d.createElement('a');
        $link.id = 'link';
        $link.href = 'https://developer.mozilla.org/en-US/docs/Web/API/Element';
        $link.innerHTML = 'DOM: Element specification';

        d.body.appendChild($link);

    notes: |
        1. Talk about difference between `querySelector` and `querySelectorAll`
        2. Maybe someone will notice that strings are created via `'` not `"`.

  - id: task-dom
    name: Task 1
    title: "Task: Displaying list of todos"
    text:
      >
      <h3>
        Your task is to create <code>index.html</code> and <code>main.js</code> in <code>/public</code> directory.
      </h3>
      <h3>
        You should also display a list of todos in DOM.
      </h3>
    code:
      small: true
      hideOutput: true
      content: |
        var todos = [
              "Checkout project from github",
              "Invoke 'play run' in your console",
              "Open your browser and head over to http://localhost:9000",
              "Learn JS essentials"
        ];

        //for each todo in todos do
        // domNode = createDomNodeForTodo()
        //  displayDomNode()
    task:
        duration: 45
        objectives: Iterate over an array of todos and create DOM elements to display them.
        extras:
              - Use Bootstrap <code>.list-group</code> component.
              - Don't use <code>.innerHTML</code>, <code>.textContent</code>, etc.
        solution:
            name: Displaying list of todos - Solution
            title: Displaying list of todos
            fiddle:
              big: true
              js: |
                var todos= ["a", "b", "c"];
                var $todosContainer = document.querySelector('.todos');
                $todosContainer.className = 'list-group';

                var k, todo, $todo;
                for (k in todos) {
                    todo = todos[k];

                    $todo = document.createElement('a');
                    $todo.className = 'list-group-item';
                    $todo.appendChild(document.createTextNode(todo));

                    $todosContainer.appendChild($todo);
                }
              html: |
                <!DOCTYPE html>
                <html lang="en">
                  <head>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Todos</title>
                    <link rel="stylesheet" href="css/bootstrap.css">
                  </head>
                  <body>
                    <!-- page content -->
                    <div class="todos"></div>
                    <script src="//code.jquery.com/jquery.js"></script>
                    <script src="js/bootstrap.js"></script>
                  </body>
                </html>


  - id: objects1
    name: Objects (1)
    title: Object literal
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };
    notes: |
      - Similarities to Java Map<String, Object>


  - id: objects2
    name: Objects (2)
    title: Accessing properties
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };
      console.log(x.key, x.array[0]);

      // Setting value
      x.object.something = 5;
    notes: |
        Ask audience how to reference x.object[0] and show life example.

        Insert new property to `x` using [] notation.

  - id: objects3
    name: Objects (3)
    title: Everything is an object
    monitor: todos
    code: |
      var todos = ["Todo 1", "Todo 2"];
      todos.noOfTodos = 2;

      console.log("Length", todos['length']);
      console.log("Property", todos['noOfTodos']);

      console.log("Todos", todos.toString());
      console.log("Todo", todos['0'].toString());
    notes: |
        Same as in Java everything is an Object, but in Javascript
        objects are open so we can modify properties dynamically.

        Notice interchangable notation of "." and "[]"
        Point out that we can invoke todo.toString() method like on every object.

  - id: task-objects
    name: Task 2
    title: "Task: Add todo state"
    text:
        >
        <h3>
          Your task is to add <code>completed</code>
          state to todo and display that using checkbox.
        </h3>
    code:
        hideOutput: true
        content: |
          //Creating checkbox
          var $checkbox = document.createElement('input');
          $checkbox.type = 'checkbox';
          $checkbox.checked = true;

          console.log($checkbox);
    task:
        duration: 20
        objectives:
            - Todos should have a read-only checkbox that displays if they are completed or not.
        extras:
            - Add tags to todos.
            - Display them using Bootstrap <code>.badge</code>.
        solution:
            name: Todo state - Solution
            title: Displaying if todo is completed
            fiddle:
                big: true
                js: |
                    var todos= [{ title: "a", completed: true, tags: ["a", "b"] },
                                { title: "b", completed: false, tags: [] }];

                    var $todosContainer = document.querySelector('.todos');

                    var k, j, todo, $todo, $checkbox, $tag;
                    for (k in todos) {
                        todo = todos[k];
                        $todo = document.createElement('a');
                        $todo.className = 'list-group-item';

                        $checkbox = document.createElement('input');
                        $checkbox.type = 'checkbox';
                        $checkbox.disabled = true;
                        $checkbox.checked = todo.completed;

                        for (j in todo.tags) {
                          $tag = document.createElement('span');
                          $tag.className = 'badge pull-right';
                          $tag.innerHTML = todo.tags[j];
                          $todo.appendChild($tag);
                        }

                        $todo.appendChild($checkbox);
                        $todo.appendChild(document.createTextNode(todo.title));

                        $todosContainer.appendChild($todo);
                    }
                html: |
                  <!DOCTYPE html>
                  <html lang="en">
                    <head>
                      <meta charset="utf-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Todos</title>
                      <link rel="stylesheet" href="css/bootstrap.css">
                    </head>
                    <body>
                      <!-- page content -->
                      <div class="todos list-group"></div>
                      <script src="//code.jquery.com/jquery.js"></script>
                      <script src="js/bootstrap.js"></script>
                    </body>
                  </html>

  - id: functions1
    name: Functions (1)
    title: Functions basics
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum1 = add(4, 5);
      var sum2 = add(sum1, 5);

      var result = {
        sum1: sum1,
        sum2: sum2
      };
    notes: |
      Naked functions that exists outside of object.
      Similarity to Java staticly imported static function (where object just defines namespace)
      This notation is called function declaration.


  - id: functions2
    name: Functions (2)
    title: Fun with functions
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum = add;

      var result = sum(2, 2);
    notes: |
      Functions are first-class citizens in JS.
      So you can just change name by assigning to different variable.
      Like assigning pointers to functions in C.

  - id: functions3
    name: Functions (3)
    title: Passing functions
    monitor: result
    code: |
      var add = function(a, b) { return a + b; };
      var sub = function(a, b) { return a - b; };

      var make = function(operation, a, b) {
        return operation(a, b);
      };

      var result = {
        add: make(add, 5, 4),
        sub: make(sub, 5, 4)
      };
    notes: |
      By using `function expression` notation we are treating functions
      the same as other variable values.

      We can pass functions to other functions.
  - id: functions4
    name: Functions (4)
    title: Invoking anonymous functions
    monitor: sum
    code: |
      (function(a, b) {
        console.log(a + b);
      })(4, 5);

      var sum = (function(a, b) {
        return a + b;
      }(4, 5));
    notes: |
      We can even invoke function right away after creating it.


  - id: functions5
    name: Functions (5)
    title: Scoping
    monitor: result
    code: |
      var CONST = 5;
      var createAdder = function(name) {

        return function(a) {
          console.log("Adder " + name, "using", a, CONST);
          return a + CONST;
        };
      };

      var add5to = createAdder("of five");
      var result = add5to(3);
    notes: |
      1. Explain that when we create function it creates it's own scope.
      2. Function has also access to all parent scopes, so you
         can access variables defined in upper scope.
      3. At the very top there is special scope called "Global scope".

  - id: functions6
    name: Functions (6)
    title: Variables reference resolving
    monitor: result
    code:
      big: true
      content: |
        var CONST = 5;
        var createAdder = function(name) {
          return function(a) { console.log("Adder " + name, "using", a, CONST); return a + CONST; };
        };

        var result = {};
        var add5to = createAdder("of five");
        result.add5to3 = add5to(3);

        // now we are modifying CONST
        CONST = 3;
        var add3to = createAdder("of three");
        result.add3to6 = add3to(6);

        // But what happens now?
        result.add5to10 = add5to(10);
    notes: |
      1. When we are creating function the value of variables in scope is not resolved yet.
      2. Unlike Java (where you have to declare variables as final) you can modify variables in upper scopes.
      3. So variables values are resolved when function is being executed.

  - id: domEvents1
    name: DOM Events
    title: Handling of User Actions
    fiddle:
      js: |
        // Create new button
        var $btn = document.createElement('button');
        $btn.className = 'btn btn-default my-btn';
        $btn.innerHTML = 'Click me!';
        document.body.appendChild($btn);


        $btn.addEventListener('click', function(ev) {
          console.log(ev);
          alert("Good job");
        });
    notes: |
      1. Tell audience to check out event in Chrome console and the properties that it has.
      2. If someone asks explain "b && b.remove()" syntax

  - id: task-events
    name: Task 3
    title: Changing todo state by user
    task:
        duration: 20
        objectives:
            - Clicking on todo should change completeness state.
        extras:
            - Add listener inline (inside loop)
            - Keyboard support - Change completeness of focused todo by pressing "space".
            - Keyboard support - Change todos by "tab" or arrows.
        solution:
            name: Todo state - Solution
            title: Changing todo state by user
            fiddle:
              big: true
              js: |
                  var todos= [{ title: "a", completed: true }, { title: "b", completed: false }];

                  var $todosContainer = document.querySelector('.todos');

                  var k,j,todo,$todo, $checkbox, $tag;
                  for (k in todos) {
                      todo = todos[k];

                      $todo = document.createElement('label');
                      $todo.className = 'list-group-item';

                      $checkbox = document.createElement('input');
                      $checkbox.type = 'checkbox';
                      $checkbox.checked = todo.completed;

                      $checkbox.addEventListener('change', (function(todo2){
                        return function() {
                          todo2.completed = $checkbox.checked;
                          console.table(todos);
                        };
                      }(todo)));

                      $todo.appendChild($checkbox);
                      $todo.appendChild(document.createTextNode(todo.title));

                      $todosContainer.appendChild($todo);
                  }
              html: |
                  <!DOCTYPE html>
                  <html lang="en">
                    <head>
                      <meta charset="utf-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Todos</title>
                      <link rel="stylesheet" href="css/bootstrap.css">
                    </head>
                    <body>
                      <!-- page content -->
                      <div class="todos list-group"></div>
                      <script src="//code.jquery.com/jquery.js"></script>
                      <script src="js/bootstrap.js"></script>
                    </body>
                  </html>

    notes: |
      1. Ask about difficulties
      2. Ask why in solution there is another anonymous function returned.
      3. Tell about other solution -> refactoring to function and why it works.
      3. Tell about `console.table`.
      4. Explain why it is important to write good, semantic HTML code - keyboard support works out of the box.

  - id: morefunctions1
    name: More Functions (1)
    title: Creating functions in loops is bad
    code:
      big: true
      hideOutput: true
      content: |
        var todos = ["todo 1", "todo 2"],
            functions = [],
            k, printTodo;

        for (var k in todos) {
          printTodo = function() {
            console.log(todos[k]);
          };
          functions[k] = printTodo;
        }

        for (var j in functions) {
          functions[j]();
        }
    notes: |
      1. Notice the warning sign that comes from jslint.
      2. Ask why it doesn't work
      3. Suggest checking in SlowMo
      4. Ask for proposed solutions

  - id: moreFunctions2
    name: More Functions (2)
    title: Everything is an object
    code:
      big: true
      hideOutput: true
      content: |
        var todos = ["todo 1", "todo 2"],
            functions = [], printTodo;

        for (var k in todos) {
          printTodo = function printTodoFunction() {
            console.log(printTodoFunction.todo);
          };
          printTodo.todo = todos[k];
          functions[k] = printTodo;
        }

        for (var j in functions) {
          functions[j]();
        }
    notes: |
      1. Remind about saying that "Everything is an object"
      2. Function expression & declaration as solution to referencing itself
         For instance for recursion
      3. Say about browser differences supports

  - id: codeOrganization
    name: Singletons
    title: Objects and methods
    monitor: Todos._todos
    code:
      big: true
      content: |
        var Todos = {
          _todos: [],

          getTodos: function() {
            return Todos._todos;
          },

          addTodo: function(title) {
            Todos._todos.push({
              title: title,
              completed: false
            });
          }
        };

        Todos.addTodo("New todo");
    notes: |
      1. Notice that we use Todos._todos notation.
      2. Mention that it might be inconvienient because of tight bounding.
         What happens if you change name?
      3. Say that later we will introduce something more flexible.

  - id: mvc1
    name: MV* (1)
    title: Model-View-* architecture
    code:
      big: true
      hideOutput: true
      content: |
        var TodosModel = {
          getTodos: function() {
            // ✂---
          },
          addTodo: function(title) {
            // ✂---
          }
        };

        var TodosView = {
          renderAllTodos: function() {
            // Clear todos
            var todos = TodosModel.getTodos();
            for (var k in todos) {
              TodosView.renderTodo(todos[k]);
            }
          },
          renderTodo: function(todo) {
            // ✂---
          }
        };

    notes: |
      1. We have clear separation of responsibilities.
      2. But Model and View is tightly bound.
      3. We can try to decouple a bit by introducing controller.

  - id: mvc2
    name: MV* (2)
    title: Model-View-* architecture
    code: 
      big: true
      hideOutput: true
      content: |
        var TodosModel = {
          getTodos: function() {},
          // Adds new todo to model and returns them
          addTodo: function(title) { return title; }
        };
        var TodosView = {
          renderAllTodos: function(todos) {
            for (var k in todos) {
              TodosView.renderTodo(todos[k]);
            }
          },
          renderTodo: function(todo) {
            // creates DOM elements and appends them
            console.log("Rendering", todo);
          }};

        // Controller
        TodosView.renderAllTodos(TodosModel.getTodos());

        // Adding new todo
        var todo = TodosModel.addTodo("New todo");
        TodosView.renderTodo(todo); // We have to remember about rendering

    notes: |
      1. Model and view is decoupled, but Controller has to care about synchronizing model and view.
      2. It would be good if changes in Model could be automatically reflected in view.

  - id: eventDriven1
    name: Events (1)
    title: Observer pattern
    code:
      big: true
      language: java
      hideOutput: true
      content: |
        public interface Observer {
            void update(Observable obj, Object data); 
        }

        public class Observable {
            private Collection<Observer> observers = new LinkedHashSet<>();

            public void addObserver(Observer o) {
                observers.add(o);
            }

            public void notifyObservers(Object data) {
               for (Observer observer : observers) {
                    observer.update(this, data);
               }
            }
        }
    notes: |
      Observable object (subject) takes care about list of listeners and notifies them about changes.

      We can actually use this to decouple Model and View a little bit more.

  - id: eventDriven2
    name: Events (2)
    title: Event-driven design
    code:
      big: true
      hideOutput: true
      content: |
        var TodosModel = {
          addTodo: function(todo) {
            TodosModel.trigger('add', todo);
          },
          trigger: function(name, data) {
            TodosModel._listener({ name: name, data: data });
          },
          listen: function(listener) {
            TodosModel._listener = listener;
          }};
        var TodosView = {
          renderTodo: function(todo) {
            console.log("Rendering", todo);
          },
          listener: function(ev) {
            if (ev.name === 'add') TodosView.renderTodo(ev.data);
          }};
        TodosModel.listen(TodosView.listener);

        // View is automagically notified
        TodosModel.addTodo("New todo");

    notes: |
      Motivation - how to ensure that when we modify model view will be refreshed?
      Why view have to be tied to only one model (or vice-versa)? How can we decouple them?
      We want to operate only on models and views should be refreshed automatically.

      Describe similarities to DOM. Talk about reactive design.
      Maybe mention something about one-thread(ness?) of JS.

      Java Observer pattern.

  - id: task-mvc-adding
    name: Task 4
    title: "Task: Adding new todo"
    code:
      hideOutput: true
      small: true
      content: |
        var todos = [];

        todos.push("append");
        todos.unshift("at the beginning");

        todos.push("at the end");
        todos.reverse();
        console.log(todos);
    task:
        duration: 60
        objectives:
            - It should be possible to add new todo.
            - Code should be organized in MV* manner.
        extras:
            - Use Bootstrap inline form
            - Adding by pressing "Enter"
            - Adding tags
        notes: |
          In solution point out that there is no need to handle keypress.
          It's better to just listen for $form.submit event.
        solution:
          name: Adding new todo - Solution
          title: Adding new todo
          fiddle:
            big: true
            js: |
              var TodosModel = {
                _todos: [],
                listener: null,
                addTodo: function(title) {
                  var todo = {
                    title: title,
                    completed: false
                  };

                  TodosModel._todos.push(todo);
                  TodosModel.listener({
                    name: 'add',
                    data: todo
                  });
                }
              };

              var TodosView = {
                initialize: function() {
                  var $input = document.querySelector('input.todo-add-input');
                  var $form = document.querySelector('form.todo-add-form');

                  $form.addEventListener('submit', function(ev) {
                      ev.preventDefault();
                      if (!$input.value) { return; }
                      TodosModel.addTodo($input.value);
                      $input.value = '';
                  });
                },

                renderTodo: function(todo) {
                  var $todosContainer = document.querySelector('.todos');

                  $todo = document.createElement('label');
                  $todo.className = 'list-group-item';

                  $checkbox = document.createElement('input');
                  $checkbox.type = 'checkbox';
                  $checkbox.checked = todo.completed;

                  $checkbox.addEventListener('change', function() {
                      todo.completed = $checkbox.checked;
                  });

                  $todo.appendChild($checkbox);
                  $todo.appendChild(document.createTextNode(" " + todo.title));

                  $todosContainer.appendChild($todo);
                },

                listener: function(ev) {
                  if (ev.name === 'add') {
                    TodosView.renderTodo(ev.data);
                  }
                }
              };

              // Assign listener
              TodosModel.listener = TodosView.listener;

              TodosView.initialize();

              TodosModel.addTodo("New todo 1");
              TodosModel.addTodo("New todo 2");

            html: |
              <!DOCTYPE html>
              <html lang="en">
                <head>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Todos</title>
                  <link rel="stylesheet" href="css/bootstrap.css">
                </head>
                <body>
                  <!-- page content -->
                  <div class="todos list-group"></div>
                  <form class="form-inline todo-add-form">
                    <input type="text" class="form-control todo-add-input">
                    <button class="btn btn-default todo-add-button">
                      <span class="glyphicon glyphicon-plus"></span>
                      Add todo
                    </button>
                  </div>
                  <script src="//code.jquery.com/jquery.js"></script>
                  <script src="js/bootstrap.js"></script>
                </body>
              </html>

  - id: hoisting
    name: Hoisting
    title: Function scope in javascript
    monitor: k
    code: |
      var todos = ["First todo", "Second todo"];
      for (var k in todos) {
        // do nothing
      }

      // Whoops?
      console.log(k);
    notes: |
      // Say about hoisting and scopes.
      // Do live demo of how the code is interpreted
      (function() {
        var todos;
        var k;

        todos = ["First todo", "Second todo"];
        for (k in todos) {
          // do nothing
        }

        // Whoops?
        console.log(k);

      }())

      // Explain that in JS there is no "block scope", we have only "function scope"
      // Mention that block scope variables comes in ECMAScript6

  - id: functional1
    name: Functional JS (1)
    title: JS functional-style
    monitor: primes2
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var primes2 = [];
      for (var k in primes) {
         primes2.push(primes[k]);
      }

      primes.forEach(function(prime, k) {
        primes2.push(prime);
      });

    notes: |
      This is example is not impressive yet.
      But most important advantage is new scope created for loop.

  - id: functional2
    name: Functional JS (2)
    title: JS functional-style processing
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.map(function(prime) {
        return prime * prime;
      });
    notes: |
      `map` will return new array with every item converted by given function
      But what if we want to process only completed elements?

  - id: functional3
    name: Functional JS (3)
    title: JS functional-style processing - chaining
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.filter(function(prime) {
        return prime > 7;
      }).map(function(prime) {
        return prime * prime;
      });
    notes: |
      We can chain invocations because those functions just returns new arrays

  - id: functional4
    name: Functional JS (4)
    title: JS functional-style reduce
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.reduce(function(sum, prime) {
        return sum + prime;
      }, 0);

    notes: |
      Using `reduce` we can process arrays in more advanced ways.

  - id: task-functional
    name: Task 5
    title: "Task: Add button to hide completed todos"
    notes: |
      // Solution to finding count of `reduce`
      var TodosModel = {
        _todos: [
          { title: "Buy beer", completed: true },
          { title: "Buy bread", completed: false },
        ],
        getStats: function() {
          return TodosModel._todos.reduce(function(memo, todo) {
            if (todo.completed) {
              memo.completed++;
            } else {
              memo.uncompleted++;
            }
            return memo;
          }, {
            completed: 0,
            uncompleted: 0
          });
        }
      };

      var result = TodosModel.getStats();

    task:
      duration: 20
      objectives:
        - Add button or checkbox to show / hide completed todos
        - Do it using <code>filter</code> function
      extras:
        - Count both completed and uncompleted todos using <code>reduce</code>
      solution:
        name: Add button to hide completed todos - Solution
        title: Add button to hide completed todos
        fiddle:
          big: true
          js: |
              var TodosModel = {
                listener: null,
                _todos: [],
                _hideCompleted: false,
                addTodo: function(title) {
                  var todo = {
                    title: title,
                    completed: false
                  };

                  TodosModel._todos.push(todo);
                  TodosModel.listener({
                    name: 'add',
                    data: todo
                  });
                },
                getTodos: function() {
                  return TodosModel._todos.filter(function(todo){
                    return !TodosModel._hideCompleted || !todo.completed;
                  });
                },
                setHideCompleted: function(hideCompleted) {
                  TodosModel._hideCompleted = hideCompleted;
                  TodosModel.listener({
                    name: 'reset',
                    data: TodosModel.getTodos()
                  });
                }
              };

              var TodosView = {
                initialize: function() {
                  var $input = document.querySelector('input.todo-add-input');
                  var $form = document.querySelector('form.todo-add-form');

                  $form.addEventListener('submit', function(ev) {
                      ev.preventDefault();

                      if (!$input.value) { return; }
                      TodosModel.addTodo($input.value);
                      $input.value = '';
                  });

                  var $hideCompleted = document.querySelector('input.todo-hide-completed');
                  $hideCompleted.addEventListener('change', function() {
                    TodosModel.setHideCompleted($hideCompleted.checked);
                  });
                },

                renderTodo: function(todo) {
                  var $todosContainer = document.querySelector('.todos');

                  $todo = document.createElement('label');
                  $todo.className = 'list-group-item';

                  $checkbox = document.createElement('input');
                  $checkbox.type = 'checkbox';
                  $checkbox.checked = todo.completed;

                  $checkbox.addEventListener('change', function() {
                      todo.completed = $checkbox.checked;
                  });

                  $todo.appendChild($checkbox);
                  $todo.appendChild(document.createTextNode(" " + todo.title));

                  $todosContainer.appendChild($todo);
                },
                renderAll: function(todos) {
                  document.querySelector('.todos').innerHTML = '';
                  todos.forEach(function(todo) {
                    TodosView.renderTodo(todo);
                  });
                },
                listener: function(ev) {
                  if (ev.name === 'add') {
                    TodosView.renderTodo(ev.data);
                  } else if (ev.name === 'reset') {
                    TodosView.renderAll(ev.data);
                  }
                }
              };

              // Assign listener
              TodosModel.listener = TodosView.listener;

              TodosView.initialize();

              TodosModel.addTodo("New todo 1");
              TodosModel.addTodo("New todo 2");
          html: |
              <!DOCTYPE html>
              <html lang="en">
                <head>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Todos</title>
                  <link rel="stylesheet" href="css/bootstrap.css">
                </head>
                <body>
                  <!-- page content -->
                  <div class="todos list-group"></div>
                  <form class="form-inline">
                    <label>
                      <input type="checkbox" class="todo-hide-completed">
                      Hide completed todos
                    </label>
                  </form>
                  <form class="form-inline todo-add-form">
                    <input type="text" class="form-control todo-add-input">
                    <button class="btn btn-default todo-add-button">
                      <span class="glyphicon glyphicon-plus"></span>
                      Add todo
                    </button>
                  </div>
                  <script src="//code.jquery.com/jquery.js"></script>
                  <script src="js/bootstrap.js"></script>
                </body>
              </html>

  - id: contexts1
    name: Contexts (1)
    title: Reusability of methods
    monitor: TodosModel._todos
    code: |
      var TodosModel = {
        _todos: [],

        addTodo: function(title) {
          TodosModel._todos.push({
            title: title,
            completed: false
          });
        }
      };

      TodosModel.addTodo("New todo");
    notes: |
      Remind about reusability matter that we have been talking about earlier.
      Change TodosModel to "this" in this snippet and explain similarity to Java

  - id: contexts2
    name: Contexts (2)
    title: Contexts - caveats
    monitor: results
    code:
      big: true
      content: |
        var results = [];
        var adder1 = {
          b: 5,
          add: function(a) {
            return a + this.b;
          }
        };
        results.push(
          adder1.add(10)
        );

        var adder2 = {
          b: 7
        };
    notes: |
      // Remind that value is resolved during execution - same is with `this` keyword.

      // Try to ask how JS knows what should `this` be resolved to?

      // Add this code

      //Borrow function
      adder2.add = adder1.add;

      results.push(
        adder2.add(10)
      );

  - id: contexts3
    name: Contexts (3)
    title: Contexts - more caveats
    monitor: result
    code: |
      var adder1 = {
        b: 5,
        add: function(a) {
          return a + this.b;
        }
      };

      var justAdd = adder1.add;

      var result = "Result is " + justAdd(10);
    notes: |
      // Now ask if someone understands what happened:)

      // Introduce more confusement by writing
      window.b = 7

      // Explain what global scope is and that `this` is set to global scope if none can be found.

  - id: contexts4
    name: Contexts (4)
    title: Contexts - even more caveats
    fiddle:
      hideOutput: true
      js: |
        var $btn = document.querySelector('.increment-btn');
        var $output = document.querySelector('.increment-output');

        var State = {
          i: 0,
          increment: function() {
            this.i++;
            console.log(this.i, State.i);
            $output.innerHTML = this.i + " " + State.i;
          }
        };
        State.increment();
        $btn.addEventListener('click', State.increment);

        document.body.appendChild($btn);
      html: |
        <html>
          <head></head>
          <body>
            <h1 class="increment-output"></h1>
            <button class="btn btn-default increment-btn">
              Increment
            </button>
          </body>
        </html>
    notes: |
      // Now ask if someone understands what happened:)
      
      // Propose to
      console.log(this) 
      // to check in which context are we

      // refactor this to sth like
      var incr = State.increment;
      $btn.addEventListener('click', incr);

      // to make it clear that we have lost context of execution

      // Ask for possible fixes:
      //  1. Wrapping in anonymous function
      //  2. Use `bind` function

  - id: contexts5
    name: Contexts (5)
    title: Invoking function in specific context
    monitor: result
    code:
      big: true
      content: |
        var result = [];
        var State1 = {
          name: 'State 1'
        };
        var State2 = {
          name: 'State 2'
        };
        var increment = function(arg1) {
          result.push("Invoking in context of " + this.name + " with argument " + arg1);
        };

        increment.call(State1, "arg1");

        increment.apply(State2, ["arg2"]);

        var fixedContext = increment.bind(State1);
        fixedContext("arg1");

        fixedContext.call(State2, "arg2");

    notes: |
      1. Describe differences between `call` and `apply`
      2. Make sure that everyone notices that after binding context .call (and .apply) doesn't matter

  - id: contexts6
    name: Contexts (6)
    title: Other applications of <code>bind</code>
    monitor: result
    code: |
        var result = [];
        var add = function(a, b) {
          var sum = a + b;
          result.push(
            a + " + " + b + " = " + sum + " in context of: " + this
          );

          return sum;
        };

        add(3, 4);

        var add3 = add.bind("add3", 3);
        add3(4);
    notes: |
      Point out that everything can be used as context (even other function)

      Explain that using `bind` we can create partially applied functions.

  - id: context7
    name: Contexts (7)
    title: Contexts and functional-style
    monitor: TodosView._results
    code: |
      var TodosView = {
        _results: [],
        renderAllTodos: function(todos) {

          for (var k in todos) {
            this.renderTodo(todos[k]);
          }

        },
        renderTodo: function(todo) {
          this._results.push("Rendering todo " + todo);
        }
      };

      TodosView.renderAllTodos(["Todo 1", "Todo 2"]);
    notes: |
      // 1. Propose to jointly refactor for-in loop to functional style.
      // 2. Show how easy it is to break context.

      // Try two solutions:
      renderAllTodos: function(todos) {
        todos.forEach(function(todo) {
          this.renderTodo(todo);
        }, this);
      },
      // 2
      renderAllTodos: function(todos) {
        todos.map(this.renderTodo.bind(this));
      }

      // And show that we break two different contexts.

  - id: task-contexts
    name: Task 6
    title: "Task: Event Bus"
    code:
      hideOutput: true
      big: true
      content: |
        var EventBus = {
          listenTo: function(eventName, func, context) {
            // TODO
          },
          trigger: function(eventName /* arguments */) {
            // TODO
          }
        };
        var State = {
          i: 0,
          increment: function() {
            this.i++;
          }
        };

        EventBus.listenTo('increment', State.increment, State);

        EventBus.trigger('increment');
        // This should result in "1"
        console.log(State.i);

    task:
      duration: 30
      objectives:
        - Implement <code>EventBus</code> object that will trigger all listeners for specific <code>eventName</code> in proper context
      extras:
        - Pass additional arguments from <code>trigger</code> method to listeners.
        - Use <code>EventBus</code> in your application to notify View from Model.
      solution:
        name: Event Bus - solution
        title: Event Bus
        monitor: State
        code: |
          var EventBus = {
            _listeners : {},
            listenTo: function(eventName, func, context) {
              var listeners = this._listeners[eventName];
              if (!listeners) {
                this._listeners[eventName] = listeners = [];
              }

              listeners.push({
                func: func,
                ctx: context
              });
            },
            trigger: function(eventName /* arguments */) {
              var listeners = this._listeners[eventName] || [];

              //var args = arguments.slice(1);
              var args = [].slice.call(arguments, 1);

              listeners.forEach(function(listener) {
                listener.func.apply(listener.ctx, args);
              });
            }
          };
          var State = {
            i: 0,
            increment: function(amount) {
              this.i += amount;
            }
          };

          EventBus.listenTo('increment', State.increment, State);

          EventBus.trigger('increment', 5);
          // This should result in "5"
          console.log(State.i);

  - id: json
    name: JSON
    title: JavaScript Object Notation
    monitor: json
    code: |
      var o = {
        array: [1, 2, 3, 4],
        string: "xyz",
        date: new Date(),
        empty: undefined
      };

      // serialize to JSON
      var json = JSON.stringify(o);

      // deserialize
      console.log(JSON.parse(json));
    notes: |
      Lightweight, human readable exchange format.
      Supports only objects, arrays, strings and numbers.
      Builtin support for serializing and deserializing

      More strict then JS object literals (quotes are required)

      Explain how outputs under code works.
  - id: rest1
    name: REST (1)
    title: REST - Representational State Transfer
    text: |
      <h2 class="text-warning">RESTful architecture constraints</h2>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Client-server
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Stateless
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Cacheable
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Layered system
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Uniform interface
      </h3>
    notes: |
      1. Client-server - we have clear separation between client and server.
         We can change any part of client code
         Or modify internals of server, or even change database
         but as long as interface is defined between them everything has to work.
      2. Stateless - Server should not store any context of client.
         Each request has to contain everything that is need by server.
      3. Cacheable - resources should defined them as cacheable.
      4. Layered system - a client cannot distinguish between end server or intermediary.
      5. Uniform interface - FUNDAMENTAL!!!
         - identification of resource / for instance URIs
         - manipulation through representations
         - self-descriptive messages - enough information to describe how to process the message
         - Hypermedia as the engine of application state (HATEOAS)
           no prior knowledge about how to interact with any application or server is required

      Example of REST architecture implementation is Web (to support session we have to pass Cookie, SessionID or something)
      But we can also build APIs on top of that.

      REST is architecture vs SOAP is a protocol.

  - id: rest2
    name: REST (2)
    title: RESTful API Example (URLs)
    text: |
      <h2>
        <span class="glyphicon glyphicon-link text-success"></span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3>URL representing a collection of fruits</h3>
      <br>
      <h2>
        <span class="glyphicon glyphicon-link text-success"></span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3>URL representing a single fruit with id <code>apple1</code></h3>

  - id: rest3
    name: REST (3)
    title: RESTful API Example (Methods on collection)
    text: |
      <h2>
        <span class="label label-success">GET</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Retrieve</strong> collection of fruits</h3>
      <br>
      <h2>
        <span class="label label-warning">PUT</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Replace</strong> entire collection with new one</h3>
      <br>
      <h2>
        <span class="label label-primary">POST</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Create</strong> a new entry in collection.</h3>
      <br>
      <h2>
        <span class="label label-danger">DELETE</span>
        <code>http://api.example.com/fruits</code>
      </h2>
      <h3><strong>Delete</strong> entire collection</h3>
    notes: |
      We use POST as Create operation due to HTTP specification:
      GET - safe operation (nullipotent) - should not produce any side-effects
      POST - has side-effects
      PUT & DELETE - idempotent methods - invoking them multiple times should have same effect.

      These properties might be used by Proxies or clients implementations.

  - id: rest4
    name: REST (4)
    title: RESTful API Example (Methods on objects)
    text: |
      <h2>
        <span class="label label-success">GET</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Retrieve</strong> details about <code>apple1</code>.</h3>
      <br>
      <h2>
        <span class="label label-warning">PUT</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Replace / Update</strong> <code>apple1</code></h3>
      <br>
      <h2>
        <span class="label label-danger">DELETE</span>
        <code>http://api.example.com/fruits/apple1</code>
      </h2>
      <h3><strong>Remove</strong> <code>apple1</code> from collection</h3>
    notes: |
      POST (Create) operation is rarely used on specific objects.

  - id: rest5
    name: REST (5)
    title: RESTful JSON API Example
    monitor: result
    code:
      big: true
      content: |
        var result = {};
        // GET https://api.github.com/users
        result.collection = [
          {
            "login": "mojombo",
            "id": 1,
            "html_url": "https://github.com/mojombo",
            "type": "User",
            "site_admin": true
          }
        ];

        // GET https://api.github.com/users/tomusdrw
        result.tomusdrw = {
          "login": "tomusdrw",
          "id": 581548,
          "html_url": "https://github.com/tomusdrw",
          "type": "User",
          "site_admin": false,
          "name": "Tomasz Drwięga",
        };
    notes: |
      First call returns collection of users (but of course is limited)
      Audience can open the link in browser - it should show the content

      Second call returns a single user out of collection, with more detailed information (like "name")

  - id: ajax1
    name: AJAX (1)
    title: Asynchronous JavaScript and XML
    monitor: promise
    code:
      small: true
      async: true
      content: |
        var promise = $.ajax({
          url: '/js/example.json',
          success: function(data) {
            console.log(data);
          }
        });
    notes: |
      Requesting single file (asynchronously) - remind about event-driven design in JS
      Mention something about one-threaded enviroment.

      Tell that output is updated with delay to show asynchronous nature.

      Mention that AJAX calls cannot be made across different domains.

  - id: ajax2
    name: AJAX (2)
    title: Using jQuery to make AJAX calls
    monitor: promise
    code:
      async: true
      content: |
        var promise = $.ajax({
          url: 'https://api.github.com/users/tomusdrw'
        }).then(function(data){
          return {
            user: data
          };
        }).then(function(data){
          console.log(data);
          return data;
        });

        promise.loading = "...";
    notes: |
      Explain that you didn't lie guys.
      jQuery automagically switches to JSONp; it uses a different mechanism (explain if there are questions)

      Say something about promises and how do they work.

  - id: play1
    name: Play! (1)
    title: Play! Framework
    text: |
      <h4 class="text-muted">The High Velocity Web Framework For Java and Scala</h4>
      <br>
      <h2>Modern framework for writing Web Servers in Java</h2>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        RESTful and Stateless by default
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        JSON is a first class citizen
      </h3>
      <h3>
        <span class="glyphicon glyphicon-ok text-success"></span>
        Non-blocking I/O
      </h3>
      <h2>
        <span class="glyphicon glyphicon-ok text-success"></span>
        <span class="text-warning">Hot reload - just hit refresh in browser!</span>
      </h2>

      <br>
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://www.playframework.com/" target="play">http://www.playframework.com/</a>
      </h4>
    notes: |
      Inspired by frameworks available in interpreted languages like: python, JS, Ruby etc.

      Netty (nio framework) and Akka (scala concurrency and distributed computing framework) under-the-hood.

  - id: play2
    name: Play! (2)
    title: Routes definition
    text: |
      <h4>
        <span class="glyphicon glyphicon-book text-muted"></span>
        <a href="http://www.playframework.com/documentation/2.2.x/JavaRouting" target="play">HTTP Routing docs</a>
      </h4>
      <br>
      <h3>File path: <code>conf/routes</code></h3>
    code:
      language: generic
      content: |
        GET   /                     controllers.Application.index()

        GET   /clients              controllers.Clients.list()
        GET   /clients/:id          controllers.Clients.show(id: java.lang.Long)

        # Map static resources from the /public folder to the /assets URL path
        GET   /assets/*file         controllers.Assets.at(path="/public", file)


    notes: |
      In conf/routes file you define what resources are available:
        It can be either JSON API
        or just HTML webpages or static files
      Explain what :id means and *file

      Tell about link to documentation

  - id: play3
    name: Play! (3)
    title: Writing controller and actions
    text: |
      <h4>
        <span class="glyphicon glyphicon-book text-muted"></span>
        <a href="http://www.playframework.com/documentation/2.2.x/JavaActions" target="play">Controllers & Actions Docs</a>
      </h4>
      <br>
      <h3>File path: <code>app/controllers/Application.java</code></h3>
    code:
      language: java
      big: true
      content: |
        package controllers;

        import play.*;
        import play.libs.Json;
        import play.mvc.*;

        public class Application extends Controller {

            public static Result index() {
                return ok("It works!");
            }

            public static Result apiCall() {
                List<String> list = Arrays.asList("Hello", "World", "!");
                return ok(Json.toJson(list)).as("application/json");
            }

        }
    notes: |
      Tell about simple action that just returns a string.
      And about converting object to JSON.

  - id: play4
    name: Play! (4)
    title: Ebean ORM
    text: |
      <h4>
        <span class="glyphicon glyphicon-book text-muted"></span>
        <a href="http://www.playframework.com/documentation/2.2.x/JavaEbean" target="play">Using Ebean Docs</a>
      </h4>
      <br>
      <h3>File path: <code>app/models/Todo.java</code></h3>
    code: 
      language: java
      big: true
      content: |
        package models;

        import javax.persistence.Entity;
        import javax.persistence.Id;

        import play.db.ebean.Model;
        import play.db.ebean.Model.Finder;

        @Entity
        public class Todo extends Model {

          @Id
          public long id;

          public String title;

          public boolean completed;


          public static final Finder<Long, Todo> find = new Finder<>(Long.class, Todo.class);
        }
    notes: |
      Tell that configuration is already defined and model is created

  - id: play5
    name: Play! (5)
    title: Fetching objects
    text: |
      <h4>
        <span class="glyphicon glyphicon-book text-muted"></span>
        <a href="http://www.playframework.com/documentation/2.2.x/JavaEbean" target="play">Using Ebean Docs</a>
      </h4>
      <br>
      <h3>File path: <code>app/controllers/Application.java</code></h3>
    code: 
      language: java
      big: true
      content: |
        package controllers;

        import play.*;
        import play.libs.Json;
        import play.mvc.*;

        public class Application extends Controller {

            public static Result getTodos() {
                List<models.Todo> todos = models.Todo.find.findList();
                return ok(Json.toJson(todos)).as("application/json");
            }
        }
    notes: |
      Other methods are described in documentation.

  - id: play6
    name: Play! (6)
    title: Creating Eclipse project
    text: |
      <h4>
        <span class="glyphicon glyphicon-book text-muted"></span>
        <a href="http://www.playframework.com/documentation/2.2.x/IDE" target="play">Setting up your preferred IDE</a>
      </h4>
      <br>
      <h3>In console run:</h3>
    code: 
      language: generic
      content: |
        $ play "eclipse with-source=true"

        // this should generate your Eclipse project that can be imported using:
        // File -> Import -> General -> Existing project

    notes: |
      Other methods are described in documentation.

  - id: task-rest
    name: Task 7
    title: "Task: Implement REST API in Java and use it for persistence"
    task:
      duration: 60
      objectives:
        - Implement simplified REST API for Todos (Get list, Replace list)
        - Add persistence to Todos application using created REST API.
      extras:
        - Implement and use full REST API for Todos (Get list, Get Single, Update, Create, Delete)
      solution:
        name: REST API - Solution
        title: REST API
        code:
          language: java
          big: true
          content: |
            package controllers;

            import java.util.List;
            import com.avaje.ebean.Ebean;
            import com.fasterxml.jackson.databind.JsonNode;
            import play.libs.Json;
            import play.mvc.*;
            import views.html.*;

            public class Application extends Controller {

              public static Result getTodos() {
                List<models.Todo> todos = models.Todo.find.findList();
                return okJsonResponse(todos);
              }

              public static Result createTodo() {
                models.Todo todo = readTodo();
                //add the new one
                Ebean.save(todo);

                return okJsonResponse(todo);
              }

              public static Result updateTodo(Long id) {
                models.Todo todo = readTodo();
                todo.id = id;

                todo.update();

                return okJsonResponse(todo);
              }

              private static models.Todo readTodo() {
                JsonNode jsonNode = request().body().asJson();
                models.Todo todo = Json.fromJson(jsonNode, models.Todo.class);
                return todo;
              }

              private static Result okJsonResponse(Object o) {
                return ok(Json.toJson(o)).as("application/json");
              }
            }
      notes: |
        Tell that we don't want to allow overriding id. this is why we ensure in updateTodo method that id is the same.
        Instead of using todo.save() we can also use Ebean.save(todo)

  - id: demo-reference
    name: Demo (Vanilla)
    title: Vanilla.js implementation

    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://vanilla-js.com/" target="js">Vanilla.js</a>
      </h4>
    fiddle:
      pure: true
      big: true
      js: |
        var FakeStorage = {
          addTodo: function(todo, callback) { callback(todo); },
          updateTodo: function(todo, callback) { callback(todo); },
          getTodos: function(callback) { callback([]); }
        };
        var Storage = {
            addTodo: function(todo, callback) {
                $.ajax({
                    method: 'post',
                    url: '/todos',
                    data: JSON.stringify(todo),
                    contentType: 'application/json; charset=utf-8'
                }).then(callback);
            },
            updateTodo: function(todo, callback) {
                return $.ajax({
                  method: 'put',
                  url: '/todos/' + todo.id,
                  data: JSON.stringify(todo),
                  contentType: 'application/json; charset=utf-8'
                }).then(callback);
            },
            getTodos: function(callback) {
                $.get('/todos').then(function(todos) {
                    callback(todos);
                });
            }
        };

        var TodosModel = {
          listener: null,
          _todos: [],
          _hideCompleted: false,
          _storage: FakeStorage,

          initialize: function() {
            this._storage.getTodos(function(todos) {
              this._todos = todos;
              this._triggerReset();
            }.bind(this));
          },
          addTodo: function(title) {
            var todo = {
              title: title,
              completed: false
            };
            this._storage.addTodo(todo, function() {
              this._todos.push(todo);
              this.listener({
                name: 'add',
                data: todo
              });
            }.bind(this));
          },
          toggleCompleted: function(todo, completed) {
            todo.completed = completed;
            return this._storage.updateTodo(todo, function() {
              console.log("Todo updated", todo);
            });
          },
          getTodos: function() {
            return this._todos.filter(function(todo){
              return !this._hideCompleted || !todo.completed;
            }, this);
          },
          setHideCompleted: function(hideCompleted) {
            this._hideCompleted = hideCompleted;
            this._triggerReset();
          },
          _triggerReset: function() {
            this.listener({
              name: 'reset',
              data: this.getTodos()
            });
          }
        };

        var TodosView = {
          initialize: function() {
            var $input = document.querySelector('input.todo-add-input');
            var $form = document.querySelector('form.todo-add-form');

            $form.addEventListener('submit', function(ev) {
                ev.preventDefault();
                if (!$input.value) { return; }
                TodosModel.addTodo($input.value);
                $input.value = '';
            });

            var $hideCompleted = document.querySelector('input.todo-hide-completed');
            $hideCompleted.addEventListener('change', function() {
              TodosModel.setHideCompleted($hideCompleted.checked);
            });
          },

          renderTodo: function(todo) {
            var $todosContainer = document.querySelector('.todos');

            $todo = document.createElement('label');
            $todo.className = 'list-group-item';

            $checkbox = document.createElement('input');
            $checkbox.type = 'checkbox';
            $checkbox.checked = todo.completed;

            $checkbox.addEventListener('change', function(){
              TodosModel.toggleCompleted(todo, $checkbox.checked);
            });

            $todo.appendChild($checkbox);
            $todo.appendChild(document.createTextNode(" " + todo.title));

            $todosContainer.appendChild($todo);
          },
          renderAll: function(todos) {
            document.querySelector('.todos').innerHTML = '';
            todos.forEach(function(todo) {
              this.renderTodo(todo);
            }, this);
          },
          listener: function(ev) {
            if (ev.name === 'add') {
              this.renderTodo(ev.data);
            } else if (ev.name === 'reset') {
              this.renderAll(ev.data);
            }
          }
        };

        // Assign listener
        TodosModel.listener = TodosView.listener.bind(TodosView);

        TodosModel.initialize();
        TodosView.initialize();

        TodosModel.addTodo("New todo 1");
        TodosModel.addTodo("New todo 2");
      html: |
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main">
              <div class="todos list-group"></div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" class="todo-hide-completed">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline todo-add-form">
                <input type="text" class="form-control todo-add-input">
                <button class="btn btn-default todo-add-button">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
          </body>
        </html>
    notes: |
      Tell why there is a fake storage.

  - id: demo-backbone
    name: Demo (Backbone)
    title: Backbone.js implementation
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://backbonejs.org" target="js">Backbone.js</a>
      </h4>
    notes: |
      Note that there is no Storage implementation cause in Backbone we have it out-of-the box.

      Main advantange over vanilla.js is that every developer will right the code in more-less the same manner.
      Code is also reusable - we can define other todos list right away.

      Backbone adds skeleton and some wireframe to your projects.
    fiddle:
      pure: true
      big: true
      js: |
          var Todo = Backbone.Model.extend({
              defaults: {
                  title: "",
                  completed: false
              }
          });
          var Todos = Backbone.Collection.extend({
              url: '/todos',
              model: Todo,
              _hideCompleted: false,
              initialize: function() {
                  this.fetch({
                      reset: true
                  });
              },
              addTodo: function(title) {
                  this.create({
                      title: title,
                      completed: false
                  });
              },
              getTodos: function() {
                  if (this._hideCompleted) {
                      return this.where({completed: false});
                  }
                  return this.slice();
              },
              setHideCompleted: function(hideCompleted) {
                  this._hideCompleted = hideCompleted;
                  this.trigger('change:hideCompleted');
              }
          });
          var TodoView = Backbone.View.extend({
              tagName: 'label',
              className: 'list-group-item',
              events: {
                  'change input': '_changeCompleted'
              },
              template: _.template('&lt;input type="checkbox" <% if (completed) { %> checked <% } %>> <%= title %>'),
              initialize: function() {
                  this.listenTo(this.model, 'change', this.render);
                  this.render();
              },
              _changeCompleted: function(ev) {
                  var completed = ev.currentTarget.checked;
                  this.model.save({
                      completed: completed
                  });
              },
              render: function() {
                  this.$el.empty();
                  var htmlContent = this.template(this.model.attributes);
                  this.$el.append(htmlContent);
                  return this;
              }
          });
          var TodosView = Backbone.View.extend({
              el: '.main-container',
              events: {
                  'submit .todo-add-form': "_addTodo",
                  'change .todo-hide-completed': '_changeHideCompleted'
              },
              initialize: function() {
                  this.listenTo(this.collection, "reset", this.render);
                  this.listenTo(this.collection, "add", this._appendOne);
                  this.listenTo(this.collection, "change:hideCompleted", this.render);
              },
              _addTodo: function(ev) {
                  ev.preventDefault();
                  var $addTitle = this.$('.todo-add-input');
                  var title = $addTitle.val();
                  $addTitle.val("");
                  this.collection.addTodo(title);
              },
              _changeHideCompleted: function(ev) {
                  var checked = ev.currentTarget.checked;
                  this.collection.setHideCompleted(checked);
              },
              _appendOne: function(todo) {
                  var todoView = new TodoView({
                      model: todo
                  });
                  this.$('.todos').append(todoView.$el);
              },
              render: function() {
                  this.$('.todos').empty();
                  this.collection.getTodos().forEach(function(todo){
                      this._appendOne(todo);
                  }, this);
                  return this;
              }
          });
          var todos = new Todos();
          var view = new TodosView({
              collection: todos
          });
          view.render();

          todos.addTodo("New todo 1");
          todos.addTodo("New todo 2");

      html: |
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main">
              <div class="todos list-group"></div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" class="todo-hide-completed">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline todo-add-form">
                <input type="text" class="form-control todo-add-input">
                <button class="btn btn-default todo-add-button">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
            <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script>
            <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js"></script>
          </body>
        </html>


  - id: demo-angular
    name: Demo (Angular)
    title: Angular.js implementation
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://angularjs.org/" target="js">Angular.js</a>
      </h4>
    notes: |
      - Less JS code - Better! (without mocking $http it's only 59 lines)
      - Clear separation between Presentation and Model
      - Automatic two-way binding between DOM and JS
      - No DOM in JS (any)
      - More HTML, but no strange CSS classes need only to reference element in JS

    fiddle:
      pure: true
      big: true
      js: |
        var todos = angular.module('todos', []);

        // Controller (dom-model binding)
        todos.controller('TodoCtrl', ['$scope', 'TodosService', function($scope, TodosService) {

            $scope.newTodoTitle = "";
            $scope.hideCompleted = false;

            var addTodo = function(title) {
              TodosService.addTodo({
                  title: title,
                  completed: false
              }).then(function(todo) {
                  $scope.todos.push(todo.data);
                  console.log("Todo added.");
              });
            };

            TodosService.getTodos().then(function(todos) {
                $scope.todos = todos.data;

                addTodo('New todo 1');
                addTodo('New todo 2');
            });

            $scope.addTodo = function() {
                var title = $scope.newTodoTitle;
                $scope.newTodoTitle = "";
                addTodo(title);
            };

            $scope.updateTodo = function(todo) {
                TodosService.updateTodo(todo).then(function() {
                    console.log("Todo updated.");
                });
            };

            $scope.getTodosFilter = function() {
                var filter = {};
                !$scope.hideCompleted || (filter['completed'] = false);
                return filter;
            };
        }]);

        // Service (abstraction over http)
        todos.factory('TodosService', ['$http', function($http) {
            return {
                addTodo: function(todo) {
                    return $http.post('/todos', todo);
                },
                updateTodo: function(todo) {
                    return $http.put('/todos/'+todo.id, todo);
                },
                getTodos: function() {
                    return $http.get('/todos');
                }
            };
        }]);

        // We can override services (even internal ones)
        todos.config(function($provide){
          $provide.factory('$http', ['$q', function($q) {
            return {
                get: function() { return $q.when({data: []}); },
                post: function(url, object) { return $q.when({data: object}); },
                put: function(url, object) { return $q.when({data: object}); }
            };
          }]);
        });

      html: |
        <!DOCTYPE html>
        <html ng-app="todos" data-framework="angularjs">
          <head>
            <meta charset="utf-8">
            <title>Todos - JS4J @ Devmeetings</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Bootstrap -->
            <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
          </head>
          <body>
            <div class="container main-container" role="main" ng-controller="TodoCtrl">
              <div class="list-group">
                <label class="list-group-item" 
                  ng-repeat="todo in todos | filter:getTodosFilter()">
                  <input type="checkbox" ng-model="todo.completed" ng-change="updateTodo(todo)">
                  {{ todo.title }}
                </label>
              </div>
              <form class="form-inline">
                <label>
                  <input type="checkbox" ng-model="hideCompleted">
                  Hide completed todos
                </label>
              </form>
              <form class="form-inline" ng-submit="addTodo()">
                <input type="text" class="form-control" ng-model="newTodoTitle">
                <button class="btn btn-default">
                  <span class="glyphicon glyphicon-plus"></span>
                  Add todo
                </button>
              </div>
            </div>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
            <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular.min.js"></script>
          </body>
        </html>

  - id: localStorage
    name: Local Storage
    title: Persistence using Local Storage
    monitor: noOfVisits
    code: |
      // retrieve something from localStorage
      var noOfVisits = window.localStorage['noOfVisits'];

      noOfVisits = parseInt(noOfVisits, 10);
      if (isNaN(noOfVisits)) {
        noOfVisits = 0;
      }

      // put something to localStorage
      localStorage.setItem('noOfVisits', noOfVisits + 1);

      // You can also use method instead of []
      var result = localStorage.getItem('noOfVisits');

    notes: |
      Say that we can also build purely client-side JS applications.
      For persistence we can use for instance Local or Session storage.

      Mention that for instance when you write Chrome plugins you have a lot more APIs available (like filesystem etc).

      Point out that localStorage
        1. Is persistent (even when you turn off the browser)
        2. Is limited (5MB per domain)
        3. Is only readable by your domain
        4. Can only store strings
        5. Is synchronous :(

      Ask how to store complex structures inside localStorage.

  - id: task-localStorage
    name: Task 8
    title: "Task: Use Local Storage for persistence in your todos application" 
    task:
      duration: 30
      objectives:
        - Change persistence to Local Storage
      extras:
        - Make Local Storage / REST Persistence easily interchangable.

  - id: comparison
    name: Comparison
    title: JS Comparison operators 
    monitor: results
    code: |
      var results = {
        "strings are equal using ==": "asd" == "asd",
        "strings are equal using ===": "asd" === "asd",
        //
        "numbers are equal using ==": 5 == "5",
        "numbers NOT equal using ===": 5 === "5",
        //
        "using == is bad": "" == 0,
        "so always use ===": "" !== 0
      };

    notes: |
      Explain the difference between == and === and their counterparts != and !==.
      Point out that there is a warning near code.

  - id: specialValues1
    name: Special Values (1)
    title: JS Special values 
    monitor: specialValues
    code: |
      var specialValues = {
        "null": null,
        "undefined": undefined,
        "Not a number": NaN
      };

      specialValues["true"] = "undefined" in specialValues;
      specialValues["false"] = "undefined2" in specialValues;

      specialValues["true again"] = specialValues['undefined'] === specialValues['undefined2'];
      console.log(specialValues);
    notes: |
      Tell the difference between undefined and null.

      Explain why you shouldnt use undefined on your own.

  - id: specialValues2
    name: Special Values (2)
    title: Special Values - Comparison
    monitor: results
    code:
      big: true
      content: |
        var results = {
          obvious: {
            "true !=(=) undefined": true != undefined,
            "true !=(=) null": true != null
          },
          makesSense: {
           "undefined == null": undefined == null,
           "isNaN == isNaN": isNaN == (0 + undefined)
          },
          stupid: {
            "false ==(=) undefined": false == undefined,
            "false ==(=) null": false == null
          },
          evenWorse: {
            "true ==(=) !undefined": true == !undefined,
            "true ==(=) !null": true == !null
          }
        };
    notes: |
      Fiddle around with questions
      tell about isNaN()

  - id: specialComparisons
    name: Special Comparisons
    title: Mind-bogglers
    text: |
      <h3>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="http://wtfjs.com/" target="ext">WTF JS?</a>
        &nbsp;
        <span class="glyphicon glyphicon-film text-muted"></span>
        <a href="https://www.destroyallsoftware.com/talks/wat" target="ext">WAT!?</a>
      </h3>
      <br>
    monitor: results
    code:
      content: |
        var results = {
          "[] == ![]": [] == ![],
          "{} == !{}": {} == !{},
          "[1] == '1'": [1] == "1",
          "[1,2,3] == [1,2,3]": [1,2,3] == [1,2,3],
          "[1,2,3] < [1,2,5]": [1,2,3] < [1,2,5],
          "Math.min() < Math.max()": Math.min() < Math.max()
        };
    notes: |
      Tell that there are plenty of such strange behaviour examples on wtfjs

  - id: mixins1
    name: Mixins (1)
    title: "Teaser: Mixins"
    monitor: result
    code: |
      var rect = {
        a: 5,
        b: 3
      };
      var area = function(rect) {
        return rect.a * rect.b;
      };

      var result = area(rect);
    notes: |
      // Let's now try to add this behaviour to all rectangles as a method.
      // How can we do this? In Java we would just create a class.
      // You may refactor the code to something like this:
      
      var rect = {
        a: 5,
        b: 3
        area: function() {
          return this.a * this.b;
        }
      };

      var result = rect.area();

      // But ask how to create another rectangle now?
  - id: mixins2
    name: Mixins (2)
    title: "Teaser: Mixins"
    text: |
      <h4>
        <span class="glyphicon glyphicon-new-window text-muted"></span>
        <a href="https://github.com/dilvie/stampit">Stampit - library for composing objects</a>
      </h4>
    monitor: results
    code:
      big: true
      content: |
        var mixin = function(destination /* args */) {
          [].slice.call(arguments, 1).forEach(function(source) {
            for (var k in source) {
              destination[k] = source[k];
            }
          });
          return destination;
        };
        // ✂---------------
        var rectFunctions = {
          area: function() {
            return this.a * this.b;
          }
        };

        var rect1 = mixin({a: 5, b: 3}, rectFunctions);
        var rect2 = mixin({a: 4, b: 4}, rectFunctions);

        var results = {
          rect1: rect1.area(),
          rect2: rect2.area()
        };
    notes: |
      // Ask if any1 knows what [].slice.call means. Explain.

      // We can easily add for instance "toString" method
      var rectFunctions = {
        area: function() {
            return this.a * this.b;
        },
        toString: function() {
            return "Rect(" + this.a + ", " + this.b + ")";
        }
      };


  - id: inheritance1
    name: Inheritance (1)
    title: "Teaser: Inheritance"
    monitor: results
    code:
      big: true
      content: |
        var Rect = function(a, b) {
          this.a = a;
          this.b = b;
        };
        Rect.prototype = {
          area: function() {
            return this.a * this.b;
          }
        };

        var rect1 = new Rect(5, 3);
        var rect2 = new Rect(4, 4);

        var results = {
          rect1: rect1.area(),
          rect2: rect2.area()
        };

    notes: |
      JS does have objects in classical sense (with "new" operator),
      but inheritance is done in different way.

      Actually you can implement class inheritance with prototype mechanism available in JS.

      Analyze this example. And say that prototype is just an object with common properties / methods.
      Function with prototype is a class definition - function is a constructor

  - id: inheritance2
    name: Inheritance (2)
    title: "Teaser: Inheritance"
    monitor: results
    code:
      big: true
      content: |
        var Rect = function(a, b) {
          this.a = a;
          this.b = b;
        };
        Rect.prototype = {
          area: function() { return this.a * this.b; }
        };

        var Square = function(a) {
          this.a = a;
          this.b = a;
        };
        Square.prototype = new Rect(1, 1);

        var results = {
          sq1: new Square(5).area(),
          sq2: new Square(4).area()
        };
    notes: |
      We can use existing object as a prototype for newly created ones.
      When accessing property / invoking method JS is searching for properties in current object and then in it's prototype and so on.

  - id: inheritance3
    name: Inheritance (3)
    title: "Teaser: Inheritance"
    text: |
      <div>
        <a href="http://pl.tinypic.com?ref=qzfb00" target="_blank">
          <img src="http://i41.tinypic.com/qzfb00.png" border="0" alt="Image and video hosting by TinyPic">
        </a>
      </div>
      <br>
    monitor: square;
    code: |
      var square = { //Type: Square
        a: 4,
        b: 4,
        __proto___: { //Type: Rect
          a: 1,
          b: 1,
          __proto___: { //Type: Object
            area: "function(){ return this.a * this.b; }",
            __proto___: "// Type: Object.prototype"
          }
        }
      };

  - id: ending
    name: Ending
    title: How do you like JS?
    text: |
      <div class="text-center">
        <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
          <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
        </a>
      </div>
      <h3 class="text-right">
        <span class="icon-mail text-muted"></span>
        <a href="mailto:tomasz.drwiega@gmail.com">tomasz.drwiega@gmail.com</a>
      </h3>
      <h3 class="text-right">
        <span class="icon-github text-muted"></span> <a href="https://github.com/tomusdrw" target="profile">github/tomusdrw</a>
        &nbsp;
        <span class="icon-google-plus text-muted"></span> <a href="https://plus.google.com/+TomaszDrwi%C4%99ga" target="profile">+Tomasz Drwięga</a>
        &nbsp;
        <span class="icon-linkedin text-muted"></span> <a href="http://www.linkedin.com/in/tomaszdrwiega" target="profile">in/Tomasz Drwięga</a>
      </h3>
     



  # Demo of applications in different implementations

  # Teaser about mixins, prototype inheritance etc
