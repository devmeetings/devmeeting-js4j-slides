---
title: JavaScript For Java Developers
trainersSecret: 123asd
slides:
  - id: opening
    name: Hello World
    title: JS 4 Java Devs
    text:
        >
        <h2>Devmeetings rocks!</h2>
    notes:
  - id: setup
    name: Environment
    text:
        >
        <p>By now you should have following software installed.</p>
        <ul>
        <li>GIT</li>
        <li>Sublime Text</li>
        <li>Node.js</li>
        <li>Play! Framework</li>
        </ul>

  - id: run
    name: Run
    title: Run Forest, Run!
    text: |
        <p>Invoke in console:</p>
        <pre><code>$ play run

        [info] Loading project definition from /share/public_html/devmeetings/Todos/project
        [info] Set current project to Todos (in build file:/share/public_html/devmeetings/Todos/)

        --- (Running the application from SBT, auto-reloading is enabled) ---

        [info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

        (Server started, use Ctrl+D to stop and go back to the console...)
        </code></pre>
        <p>Open <a href="http://localhost:9000">localhost:9000</a></p>

  - id: basics1
    name: JS Basics (1)
    title: Variables and Literals
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];
    monitor: todos
    notes: |
        0. JS is:
          * interpreted
          * dynamically typed
          * awesome
        1. Keyword `var`
        2. Assignment
        3. String literal, Array literal

        - Say something about auto-execution
        - Show how to use object inspector

  - id: basics2
    name: JS Basics (2)
    title: Methods
    code: | 
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        console.log(todos);
    monitor: todos
    notes: |
        0. Invoking method
        1. Say about some global variables that are out there
          - console
          - window (browser)
          - document (browser)
        2. Mention something about history of JS - browser/server
        3. Opening Chrome Dev Tools / Firebug:
          - F12 / Ctrl+Shift+I
          - Go to "Console" tab.
          - Show where to search for errors
          - Mention about Debugging

  - id: basics3
    name: JS Basics (3)
    title: Simple loop (C-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var i=0; i<todos.length; i++) {
          console.log(i, todos[i]);
        }
    monitor: todos
    notes: |
        1. Getting property of object `todos.length`
        2. `[]` access operator

  - id: basics4
    name: JS Basics (4)
    title: Simple loop (Java-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var k in todos) {
          console.log(k, todos[k]);
        }
    monitor: todos
    notes: |
        0. Point out difference to Java loop
        1. Notice a difference in naming
        2. `[]` access operator
        3. Mention something about going through **object** properties

  - id: dom0
    name: DOM
    title: Document Object Model (DOM)
    text: |
        <figure>
        <img src="http://watershedcreative.com/naked/img/dom-tree.png" />
        <figcaption>
          <address>Source: http://watershedcreative.com/naked/html-tree.html</address>
        </figcaption>
        </figure>
    notes: |
        1. Ask about knowledge of DOM
        2. Explain some basics and relation to XML

  - id: dom1
    name: HTML5
    title: Minimal HTML5 webpage
    code:
      language: html
      content: |
            <!DOCTYPE html>
            <html lang="en">
              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Hello World</title>
                <link rel="stylesheet" href="css/bootstrap.css">
              </head>
              <body>
                <!-- page content -->
                 <script src="//code.jquery.com/jquery.js"></script>
                 <script src="js/bootstrap.js"></script>
              </body>
            </html>
    notes: |
        Talk sth about frameworks like TwitterBootstrap.
        Other examples: Foundation,
        Grid systems: Skeleton, HTML5 Boilerplate, LESS Framework

  - id: dom2
    name: Accessing DOM (1)
    title: Hello DOM
    monitor: content
    code: |
        var h1 = document.querySelector(".main-content h1");
        h1.innerHTML += "...";

        var content = h1.innerHTML;

    notes: |
        Say about accessing DOM and JavaScript representation of DOM

  - id: dom3
    name: Accessing DOM (2)
    title: Creating DOM elements
    monitor: link
    code: |
        var d = document;
        var link = d.createElement('a');
        link.id = 'link';
        link.href = 'https://developer.mozilla.org/en-US/docs/Web/API/Element';
        link.innerHTML = 'DOM: Element specification';

        if (!d.querySelectorAll('#link').length) {
            d.querySelector('.main-content h1').appendChild(link);
        }
    notes: |
        1. Talk about difference between `querySelector` and `querySelectorAll`
        2. Maybe someone will notice that strings are created via `'` not `"`.

  - id: task1
    name: Task 1
    title: "Task: Displaying list of todos"
    text:
      >
      <h3>
        Your task is to write code in <code>main.js</code>
        to display a list of todos in DOM.
      </h3>
    code:
        language: generic
        content: |
          for each todo in todos do
            domNode = createDomNodeForTodo()
            displayDomNode()
    task:
        duration: 30
        objectives: Iterate over an array of todos and create DOM elements to display them.
        extras:
              - Use Bootstrap <code>.list-group</code> component.
              - Don't use <code>.innerHTML</code>, <code>.textContent</code>, etc.
        solution:
            name: Task 1 - Solution
            title: Displaying list of todos
            code:
                language: javascript
                hideOutput: true
                content: |
                    var todos= ["a", "b", "c"];
                    var $todosContainer = document.createElement('div');
                    $todosContainer.className = 'list-group';

                    var k, todo, $todo;
                    for (k in todos) {
                        todo = todos[k];

                        $todo = document.createElement('a');
                        $todo.className = 'list-group-item';
                        $todo.appendChild(document.createTextNode(todo));

                        $todosContainer.appendChild($todo);
                    }

                    document.body.appendChild($todosContainer);


  - id: objects1
    name: Objects (1)
    title: Object literal
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };
    notes: |
      - Similarities to Java Map<String, Object>


  - id: objects2
    name: Objects (2)
    title: Accessing properties
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };

      console.log(x.key);
      console.log(x.array[0]);

      // Setting value
      x.object.something = 5;
    notes: |
        Ask audience how to reference x.object[0] and show life example.

        Insert new property to `x` using [] notation.

  - id: objects3
    name: Objects (3)
    title: Everything is an object
    monitor: todos
    code: |
      var todos = ["Todo 1", "Todo 2"];
      todos.noOfTodos = 2;

      console.log("Length", todos['length']);
      console.log("Property", todos['noOfTodos']);

      console.log("Todos", todos.toString());
      console.log("Todo", todos['0'].toString());
    notes: |
        Same as in Java everything is an Object, but in Javascript
        objects are open so we can modify properties dynamically.

        Notice interchangable notation of "." and "[]"
        Point out that we can invoke todo.toString() method like on every object.

  - id: task2
    name: Task 2
    title: "Task 2: Add todo state"
    text:
        >
        <h3>
          Your task is to add <code>completed</code>
          state to todo and display that using checkbox.
        </h3>
    code:
        language: javascript
        hideOutput: true
        content: |
          //Creating checkbox
          var $checkbox = document.createElement('input');
          $checkbox.type = 'checkbox';
          $checkbox.checked = true;

          console.log($checkbox);
    task:
        duration: 20
        objectives:
            - Todos should have a read-only checkbox that displays if they are completed or not.
        extras:
            - Add tags to todos.
            - Display them using Bootstrap <code>.badge</code>.
        solution:
            name: Task 2 - Solution
            title: Displaying if todo is completed
            code:
                language: javascript
                hideOutput: true
                content: |
                    var todos= [{
                      title: "a", completed: true, tags: ["a", "b"]
                    }, {
                      title: "b", completed: false, tags: []
                    }];

                    var $todosContainer = document.createElement('div');
                    $todosContainer.className = 'list-group';

                    var k,j,todo,$todo, $checkbox, $tag;
                    for (k in todos) {
                        todo = todos[k];

                        $todo = document.createElement('a');
                        $todo.className = 'list-group-item';

                        $checkbox = document.createElement('input');
                        $checkbox.type = 'checkbox';
                        $checkbox.checked = todo.completed;
                        $checkbox.disabled = true;

                        for (j in todo.tags) {
                          $tag = document.createElement('span');
                          $tag.className = 'badge pull-right'
                          $tag.innerHTML = todo.tags[j];
                          $todo.appendChild($tag);
                        }

                        $todo.appendChild($checkbox);
                        $todo.appendChild(document.createTextNode(todo.title));

                        $todosContainer.appendChild($todo);
                    }
                    document.body.appendChild($todosContainer);

  - id: functions1
    name: Functions (1)
    title: Functions basics
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum1 = add(4, 5);
      var sum2 = add(sum1, 5);

      var result = {
        sum1: sum1,
        sum2: sum2
      };

  - id: functions2
    name: Functions (2)
    title: Fun with functions
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum = add;

      var result = sum(2, 2);

  - id: functions3
    name: Functions (3)
    title: Fun with functions
    monitor: result
    code: |
      var add = function(a, b) {
        return a + b;
      };
      var sub = function(a, b) {
        return a - b;
      };

      var makeOperation = function(operation, a, b) {
        return operation(a, b);
      };

      var result = {
        add: makeOperation(add, 5, 4),
        sub: makeOperation(sub, 5, 4)
      };
# Functions
# DOM event binding
# Task: Completed state binding
# Task: Adding todo
# Functions as objects
# Simple classes (Singletons)
# Event-driven design
# MV*
# Functional style
# Contexts
# LocalStorage
# REST








