---
title: JavaScript For Java Developers (part 1)
trainersSecret: 123asd1
slides:
  - id: opening
    name: Hello World
    title: JavaScript 4 Java Devs - part 1
    left:
      text: |
          <h3>
            Hello <span class="user-name"></span>!
          </h3>
          <h2>
            <a href="http://devmeetings.pl"><img src="http://blacksoft.eu/files/devmeetings_240.png"></a>
            rocks!
          </h2>
      code:
        small: true
        hideOutput: true
        content: |
          var username = localStorage.getItem('name');
          while (!username) {
            username = prompt("Please provide your name");
          }
          localStorage.setItem('name', username);
          document.querySelector('.user-name').innerText = username;
    right:
      text:
          >
          <div class="text-center">
            <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
              <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
            </a>
          </div>
    notes: |
      What will we learn today:
        - Introduction to HTML and CSS
        - JavaScript basics
        - Part 2
        - Introduction to Play! Framework 
        - Teasers for other features:
          - ServerSide JS
          - JS Frameworks
          - Advanced JS

  - id: run
    name: Run
    title: Ready for an adventure?
    text: |
      <h3 class="text-muted">JavaScript will hurt your feelings</h3>
    code:
      small: true
      hideOutput: true
      content: |
        var ready = false;
    microtasks:
      - description: Indicate that you are ready for new sensations
        hint: Change value of <code>ready</code> variable to <code>true</code>
        js_assert: ready === true

  - id: basics1
    name: JS Basics
    title: Variables and Literals
    code:
      small: true
      content: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];
    monitor: todos
    microtasks:
      - description: Add one more todo to array
        hint: Use string literal <code>"imma string"</code> and paste it after comma
        js_assert: todos.length === 5
      - description: Clear the whole <code>todos</code> array
        hint: Assign empty array <code>[]</code> to <code>todos</code> variable
        js_assert: todos.length === 0
    notes: |
        0. JS is:
          * interpreted
          * dynamically typed
          * awesome
        1. Keyword `var`
        2. Assignment
        3. String literal, Array literal

        - Say something about auto-execution
        - Show how to use object inspector

  - id: basics2
    name: JS Basics
    title: Methods
    code:
      small: true
      content: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        console.log(todos);
    monitor: todos
    microtasks:
      - description: Create variable <code>x</code> with value <code>2014</code>
        hint: Use <code>var</code> keyword to create variable and assign <code>2014</code>
        js: var x\s*=\s*2014
    notes: |
        0. Invoking method
        1. Say about some global variables that are out there
          - console
          - window (browser)
          - document (browser)
        2. Mention something about history of JS - browser/server
        3. Opening Chrome Dev Tools / Firebug:
          - F12 / Ctrl+Shift+I
          - Go to "Console" tab.
          - Show where to search for errors
          - Mention about Debugging

  - id: basics3
    name: JS Basics
    title: Simple loop (C-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var i=0; i<todos.length; i++) {
          console.log(i, todos[i]);
        }
    monitor: todos
    microtasks:
      - description: Skip first element in loop
        hint: Change initial value of <code>i</code> to <code>1</code>
        js: for\s*\(var i\s*=\s*1\s*;
    notes: |
        1. Getting property of object `todos.length`
        2. `[]` access operator

  - id: basics4
    name: JS Basics
    title: Simple loop (Java-style)
    code: |
        var todos = [
            "Checkout project from github",
            "Invoke 'play run' in your console",
            "Open your browser and head over to http://localhost:9000",
            "Learn JS essentials"
        ];

        for (var k in todos) {
          console.log(k, todos[k]);
        }
    monitor: todos
    notes: |
        0. Point out difference to Java loop
        1. Notice a difference in naming
        2. `[]` access operator
        3. Mention something about going through **object** properties
    microtasks:
      - description: Assign value of <code>todos[k]</code> to variable named <code>todo</code>
        hint: Use <code>var todo = todos[k];</code> syntax to create new variable inside a loop
        js: |
          var\s+todo\s*=\s*todos\[k\];

  - id: dom0
    name: DOM
    title: Document Object Model (DOM)
    text: |
        <div class="text-center">
          <figure>
          <a href="http://watershedcreative.com/naked/html-tree.html" target="dom">
            <img src="http://watershedcreative.com/naked/img/dom-tree.png" />
          </a>
          <figcaption>
            <address>
              Source: 
                <a href="http://watershedcreative.com/naked/html-tree.html" target="dom">
                  http://watershedcreative.com/naked/html-tree.html
                </a>
                <span class="glyphicon glyphicon-new-window text-muted"></span>
            </address>
          </figcaption>
          </figure>
        </div>
    notes: |
        1. Ask about knowledge of DOM
        2. Explain some basics and relation to XML
    footer: |
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="dom" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">General DOM</span> training
        </label>
      </h2>
    script: &trainingStats |
      var $checkbox = $('.training-checkbox');
      var username = localStorage.getItem('name');
      var training = $checkbox.data('training');
      $checkbox.on('change', function(){
        var training = $(this).data('training');
        var state = this.checked;
        localStorage.setItem('training-'+training, state);
        $.ajax({
          method: 'POST',
          url: 'http://todr.me:3002/trainings',
          data: {
            user: username,
            currentTraining: 'js4j-p1',
            training: training,
            isGoing: state
          }
        });
      });
      $checkbox.prop('checked', !!localStorage.getItem('training-'+training));

  - id: dom1
    name: HTML5
    title: Minimal HTML5 webpage
    fiddle:
      active: html
      big: true
      pure: true
      html: |
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Hello World</title>
              <link rel="stylesheet" 
                  href="http://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css">
            </head>
            <body>
              <h1>Hello world</h1>
              <!-- page content -->
              <script src="http://code.jquery.com/jquery.js"></script>
              <script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js">
              </script>
            </body>
          </html>
    notes: |
        Talk sth about frameworks like TwitterBootstrap.
        Other examples: Foundation,
        Grid systems: Skeleton, HTML5 Boilerplate, LESS Framework
    footer: |
      <br>
      <h2 class="checkbox">
        <label>
          <input type="checkbox" class="training-checkbox" data-training="html5" style="width:25px;height:25px">
          &nbsp; I would be interested in <span class="text-primary">Semantic HTML5 and CSS3</span> training
        </label>
      </h2>
    script: *trainingStats
    microtasks:
      - description: Add <code>text-success</code> class to header
        hint: Use <code>class="text-success"</code> attribute to <code>h1</code> tag
        html: |
          <h1\s+class=\"text-success\"\s*>
      - description: Add subheader <code>h2</code> with id <code>subheader</code>
        hint: Insert <code>&lt;h2 id="subheader"&gt;</code> somewhere under <code>h1</code>
        html: |
          <h2\s+id=\"subheader\"\s*>

  - &dom2 
    id: dom2
    name: Accessing DOM
    title: Hello DOM
    monitor: content
    text: |
      <h4 class="text-muted" id="subheader">We can query DOM! <span class="glyphicon glyphicon-heart-empty"></span></h4>
    code:
      small: true
      content: |
        var h1 = document.querySelector(".main-content h1");
        h1.innerText += "...";

        var content = h1.innerHTML;

    notes: |
        Say about accessing DOM and JavaScript representation of DOM

        Encourage ppl to play with content inside slide to see that more "..." is appended each time.
    microtasks:
      - description: Change content of header to <code>"JavaScript rocks!"</code>
        hint: Use <code>innerHTML</code> or <code>innerText</code> property to assign string to it.
        js_assert: |
          h1.innerText === "JavaScript rocks!"
      - description: Change selector to find sub-header by id.
        hint: Change argument to <code>querySelector</code> to <code>#subheader</code>
        js: |
          querySelector\(["']#subheader["']\);

  - id: dom3
    name: Accessing DOM
    title: jQuery style
    left:
      text: |
        <h4 class="jquery-link">
          <span class="glyphicon glyphicon-new-window text-muted"></span>
          <a href="http://jquery.com/" target="jquery">What is jQuery?</a>
        </h4>
      monitor: content
      code:
        small: true
        content: |
          var $h1 = $('.main-content h1');
          $h1.text($h1.text() + "...");

          var content = $h1.html();
    right: *dom2
    notes: |
      Mention that this way might be more familiar to some developers.
      Explain that jQuery is great library to manipulate DOM,
      and it makes perfect sense to use it because it hides differences 
      between old web browsers.

      However rest of slides will be using vanilla JS to simplify syntax.

      Explain why we are using variables with such naming ($h1)
    microtasks:
      - description: Use DevTools (Firebug) to find jQuery link class and change selector in code.
        hint: Use <code>jquery-link</code> class to find element
        js: |
          \$\(['"].jquery-link['"]\);
      - description: Remove link to jQuery from DOM
        hint: Use <code>.remove()</code> method from jQuery
        js_assert: |
          document.querySelector('.jquery-link') === null
  - id: dom4
    name: Accessing DOM
    title: Creating DOM elements
    monitor: link
    fiddle: 
      js: |
        var d = document;
        var $link = d.createElement('a');
        $link.id = 'link';
        $link.href = 
            'https://developer.mozilla.org/en-US/docs/Web/API/Element';
        $link.innerHTML = 'DOM: Element specification';

        d.body.appendChild($link);

    notes: |
        1. Talk about difference between `querySelector` and `querySelectorAll`
        2. Maybe someone will notice that strings are created via `'` not `"`.
    microtasks:
      - description: Programmatically change class of element to <code>btn btn-default</code>
        hint: Use <code>className</code> property to assign <code>"btn btn-default"</code>
        js_assert:
          $link.className === 'btn btn-default'

  - id: task-dom
    name: Task 1
    title: "Task: Displaying list of todos"
    text:
      >
      <h4>
        Your task is to create <code>index.html</code> and <code>main.js</code> in any directory on your disk.
      </h4>
      <h4>
        You should also display a list of todos using methods to create and manipulate DOM elements that you have learned.
      </h4>
    code:
      small: true
      hideOutput: true
      content: |
        var todos = [
              "Checkout project from github",
              "Invoke 'play run' in your console",
              "Open your browser and head over to http://localhost:9000",
              "Learn JS essentials"
        ];
    task:
        duration: 45
        objectives: Iterate over an array of todos and create DOM elements to display them.
        extras:
              - Use Bootstrap <code>.list-group</code> component.
              - Don't use <code>.innerHTML</code>, <code>.textContent</code>, etc.
        solution:
            name: Displaying list of todos - Solution
            title: Displaying list of todos
            fiddle:
              big: true
              js: |
                var todos= ["a", "b", "c"];
                var $todosContainer = document.querySelector('.todos');
                $todosContainer.className = 'list-group';

                var k, todo, $todo;
                for (k in todos) {
                    todo = todos[k];

                    $todo = document.createElement('a');
                    $todo.className = 'list-group-item';
                    $todo.appendChild(document.createTextNode(todo));

                    $todosContainer.appendChild($todo);
                }
              html: |
                <!DOCTYPE html>
                <html lang="en">
                  <head>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Todos</title>
                    <link rel="stylesheet" href="css/bootstrap.css">
                  </head>
                  <body>
                    <!-- page content -->
                    <div class="todos"></div>
                    <script src="//code.jquery.com/jquery.js"></script>
                    <script src="js/bootstrap.js"></script>
                  </body>
                </html>


  - id: objects1
    name: Objects
    title: Object literal
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };
    notes: |
      - Similarities to Java Map<String, Object>
    microtasks:
      - description: Add an empty object to Array under property <code>array</code>
        hint: Use <code>{}</code> to create empty object and type it after comma
        js_assert: |
          typeof(x.array[3]) === 'object'
      - description: Add property <code>number</code> with value <code>5</code> to object <code>x</code>
        hint: "Just write another property <code>number: 5,</code>. Remember about comma at the end."
        js_assert: |
          x.number === 5


  - id: objects2
    name: Objects
    title: Accessing properties
    monitor: x
    code: |
      var x = {
          key: 'value',
          array: ['has', 3, 'values'],
          object: {
              0: 'First'
          }
      };
      console.log(x.key, x.array[0]);

      // Setting value
      x.object.something = 5;
    notes: |
        Ask audience how to reference x.object[0] and show life example.

        Insert new property to `x` using [] notation.
    microtasks:
      - description: Assign value of second element from property <code>array</code> of <code>x</code> to variable <code>three</code>
        hint: Use <code>x.array[1]</code> notation to retrieve property
        js_assert: |
          three === 3
        js: |
          three\s*=\s*x
      - description: Access property <code>0</code> of <code>x.object</code> and assign to variable <code>first</code>
        hint: <code>var first = x.object[?]</code>
        js_assert: |
          first === 'First'
        js: |
          first\s*=\s*x


  - id: objects3
    name: Objects
    title: Everything is an object
    monitor: todos
    code: |
      var todos = ["Todo 1", "Todo 2"];
      todos.noOfTodos = 2;

      console.log("Length", todos['length']);
      console.log("Property", todos['noOfTodos']);

      console.log("Todos", todos.toString());
      console.log("Todo", todos['0'].toString());
    notes: |
        Same as in Java everything is an Object, but in Javascript
        objects are open so we can modify properties dynamically.

        Notice interchangable notation of "." and "[]"
        Point out that we can invoke todo.toString() method like on every object.
    microtasks:
      - description: Create an object with properties <code>0</code>, <code>1</code> and <code>length</code> and assign it to variable <code>x</code>
        hint: Use object literal or just create array.
        js_assert: |
          x[0] !== undefined && x[1] !== undefined && x.length !== undefined

  - id: task-objects
    name: Task 2
    title: "Task: Add todo state"
    text:
        >
        <h4>
          Your task is to add <code>completed</code>
          state to todo and display that using checkbox.
        </h4>
    code:
        hideOutput: true
        small: true
        content: |
          //Creating checkbox
          var $checkbox = document.createElement('input');
          $checkbox.type = 'checkbox';
          $checkbox.checked = true;

          console.log($checkbox);
    task:
        duration: 20
        objectives:
            - Todos should have a read-only checkbox that displays if they are completed or not.
        extras:
            - Add tags to todos.
            - Display them using Bootstrap <code>.badge</code>.
        solution:
            name: Todo state - Solution
            title: Displaying if todo is completed
            fiddle:
                big: true
                js: |
                    var todos= [{ title: "a", completed: true, tags: ["a", "b"] },
                                { title: "b", completed: false, tags: [] }];

                    var $todosContainer = document.querySelector('.todos');

                    var k, j, todo, $todo, $checkbox, $tag;
                    for (k in todos) {
                        todo = todos[k];
                        $todo = document.createElement('a');
                        $todo.className = 'list-group-item';

                        $checkbox = document.createElement('input');
                        $checkbox.type = 'checkbox';
                        $checkbox.disabled = true;
                        $checkbox.checked = todo.completed;

                        for (j in todo.tags) {
                          $tag = document.createElement('span');
                          $tag.className = 'badge pull-right';
                          $tag.innerHTML = todo.tags[j];
                          $todo.appendChild($tag);
                        }

                        $todo.appendChild($checkbox);
                        $todo.appendChild(document.createTextNode(todo.title));

                        $todosContainer.appendChild($todo);
                    }
                html: |
                  <!DOCTYPE html>
                  <html lang="en">
                    <head>
                      <meta charset="utf-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Todos</title>
                      <link rel="stylesheet" href="css/bootstrap.css">
                    </head>
                    <body>
                      <!-- page content -->
                      <div class="todos list-group"></div>
                      <script src="//code.jquery.com/jquery.js"></script>
                      <script src="js/bootstrap.js"></script>
                    </body>
                  </html>

  - id: functions1
    name: Functions
    title: Functions basics
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum1 = add(4, 5);
      var sum2 = add(sum1, 5);

      var result = {
        sum1: sum1,
        sum2: sum2
      };
    notes: |
      Naked functions that exists outside of object.
      Similarity to Java staticly imported static function (where object just defines namespace)
      This notation is called function declaration.
    microtasks:
      - description: Create function that subtracts two numbers. Call it <code>sub</code>
        hint: Use function declaration syntax <code>function sub(a, b) {}</code> and return difference.
        js_assert: |
          sub(4, 5) === -1


  - id: functions2
    name: Functions
    title: Fun with functions
    monitor: result
    code: |
      function add(a, b) {
        var sum = a + b;
        console.log(a, " + ", b, " = ", sum);
        return sum;
      }
      var sum = add;

      var result = sum(2, 2);
    notes: |
      Functions are first-class citizens in JS.
      So you can just change name by assigning to different variable.
      Like assigning pointers to functions in C.
    microtasks:
      - description: Assign function sum to new variable named <code>plus</code>
        hint: Create new variable <code>var plus</code> and assign function to it
        js_assert: |
          sum === plus && sum === add

  - id: functions3
    name: Functions
    title: Passing functions
    monitor: result
    code: |
      var add = function(a, b) { return a + b; };
      var sub = function(a, b) { return a - b; };

      var make = function(operation, a, b) {
        return operation(a, b);
      };

      var result = {
        add: make(add, 5, 4),
        sub: make(sub, 5, 4)
      };
    notes: |
      By using `function expression` notation we are treating functions
      the same as other variable values.

      We can pass functions to other functions.
    microtasks:
      - description: "Create function <code>invoke</code> that accepts a function, invokes it and returns it's value."
        hint: <code>var invoke = function(funcToInvoke) { /* Invokation */ };</code>
        js_assert: |
          invoke(function() { window.invoked = true; return true; }) === true && window.invoked === true
  - id: functions4
    name: Functions
    title: Invoking anonymous functions
    monitor: sum
    code: |
      (function(a, b) {
        console.log(a + b);
      })(4, 5);

      var sum = (function(a, b) {
        return a + b;
      }(4, 5));
    notes: |
      We can even invoke function right away after creating it.
    microtasks:
      - description: Add third argument to function that returns a sum. Assign to <code>sum</code> result of adding <code>4+5+7</code>
        hint: <code>(function(a, b, c) { }(4, 5, 7))</code>
        js: | 
          \(\s*4,\s*5,\s*7\s*\)
        js_assert: |
          sum === 4+5+7


  - id: functions5
    name: Functions
    title: Scoping
    monitor: result
    code: |
      var CONST = 5;
      var createAdder = function(name) {

        return function(a) {
          console.log("Adder " + name, "using", a, CONST);
          return a + CONST;
        };
      };

      var add5to = createAdder("of five");
      var result = add5to(3);
    notes: |
      1. Explain that when we create function it creates it's own scope.
      2. Function has also access to all parent scopes, so you
         can access variables defined in upper scope.
      3. At the very top there is special scope called "Global scope".
    microtasks:
      - description: Write function that creates a multiplier by <code>CONST</code>. Name it <code>createMultiplier</code>.
        hint: <code>var createMultiplier = function() { return function(a) { /* Multiplication */ }; }</code>
        js_assert: |
          createMultiplier()(15) === 5*15

  - id: functions6
    name: Functions
    title: Variables reference resolving
    monitor: result
    code:
      big: true
      content: |
        var CONST = 5;
        var createAdder = function(name) {
          return function(a) { console.log("Adder " + name, "using", a, CONST); return a + CONST; };
        };

        var result = {};
        var add5to = createAdder("of five");
        result.add5to3 = add5to(3);

        // now we are modifying CONST
        CONST = 3;
        var add3to = createAdder("of three");
        result.add3to6 = add3to(6);

        // But what happens now?
        result.add5to10 = add5to(10);
    notes: |
      1. When we are creating function the value of variables in scope is not resolved yet.
      2. Unlike Java (where you have to declare variables as final) you can modify variables in upper scopes.
      3. So variables values are resolved when function is being executed.

  - id: domEvents1
    name: DOM Events
    title: Handling of User Actions
    fiddle:
      js: |
        // Create new button
        var $btn = document.createElement('button');
        $btn.className = 'btn btn-default my-btn';
        $btn.innerHTML = 'Click me!';
        document.body.appendChild($btn);


        $btn.addEventListener('click', function(ev) {
          console.log(ev);
          alert("Good job");
        });
    notes: |
      1. Tell audience to check out event in Chrome console and the properties that it has.
    microtasks:
      - description: In alert display if <code>SHIFT</code> key has been pressed while clicking.
        hint: Use <code>shiftKey</code> property of <code>ev</code> object.
        js: | 
          ev\.shiftKey

  - id: task-events
    name: Task 3
    title: Changing todo state by user
    task:
        duration: 20
        objectives:
            - Clicking on todo should change completeness state.
        extras:
            - Add listener inline (inside loop)
            - Keyboard support - Change completeness of focused todo by pressing "space".
            - Keyboard support - Change todos by "tab" or arrows.
        solution:
            name: Todo state - Solution
            title: Changing todo state by user
            fiddle:
              big: true
              js: |
                  var todos= [{ title: "a", completed: true }, { title: "b", completed: false }];

                  var $todosContainer = document.querySelector('.todos');

                  var k,j,todo,$todo, $checkbox, $tag;
                  for (k in todos) {
                      todo = todos[k];

                      $todo = document.createElement('label');
                      $todo.className = 'list-group-item';

                      $checkbox = document.createElement('input');
                      $checkbox.type = 'checkbox';
                      $checkbox.checked = todo.completed;

                      $checkbox.addEventListener('change', (function(todo2){
                        return function() {
                          todo2.completed = $checkbox.checked;
                          console.table(todos);
                        };
                      }(todo)));

                      $todo.appendChild($checkbox);
                      $todo.appendChild(document.createTextNode(todo.title));

                      $todosContainer.appendChild($todo);
                  }
              html: |
                  <!DOCTYPE html>
                  <html lang="en">
                    <head>
                      <meta charset="utf-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Todos</title>
                      <link rel="stylesheet" href="css/bootstrap.css">
                    </head>
                    <body>
                      <!-- page content -->
                      <div class="todos list-group"></div>
                      <script src="//code.jquery.com/jquery.js"></script>
                      <script src="js/bootstrap.js"></script>
                    </body>
                  </html>

    notes: |
      1. Ask about difficulties
      2. Ask why in solution there is another anonymous function returned.
      3. Tell about other solution -> refactoring to function and why it works.
      3. Tell about `console.table`.
      4. Explain why it is important to write good, semantic HTML code - keyboard support works out of the box.

  - id: morefunctions1
    name: More Functions
    title: Creating functions in loops is bad
    code:
      big: true
      hideOutput: true
      content: |
        var todos = ["todo 1", "todo 2"],
            functions = [],
            k, printTodo;

        for (var k in todos) {
          printTodo = function() {
            console.log(todos[k]);
          };
          functions[k] = printTodo;
        }

        for (var j in functions) {
          functions[j]();
        }
    notes: |
      1. Notice the warning sign that comes from jslint.
      2. Ask why it doesn't work
      3. Suggest checking in SlowMo
      4. Ask for proposed solutions
    microtasks:
      - description: See what happens if you change second loop index from <code>var j</code> to <code>var k</code>
        hint: Notice what is logged on console. Can you explain why it works?
        js: | 
          var\s+k\s+in\s+functions\)

  - id: moreFunctions2
    name: More Functions
    title: Everything is an object
    code:
      big: true
      hideOutput: true
      content: |
        var todos = ["todo 1", "todo 2"],
            functions = [], printTodo;

        for (var k in todos) {
          printTodo = function printTodoFunction() {
            console.log(printTodoFunction.todo);
          };
          printTodo.todo = todos[k];
          functions[k] = printTodo;
        }

        for (var j in functions) {
          functions[j]();
        }
    notes: |
      1. Remind about saying that "Everything is an object"
      2. Function expression & declaration as solution to referencing itself
         For instance for recursion
      3. Say about browser differences support
    microtasks:
      - description: Add property <code>index</code> to each created function with value of <code>k</code>
        hint: Try with <code>printTodo.index = 0</code> in first loop
        js_assert: |
          functions[0].index == 0 && functions[1].index == 1


  - id: codeOrganization
    name: Singletons
    title: Objects and methods
    monitor: Todos._todos
    code:
      big: true
      content: |
        var Todos = {
          _todos: [],

          getTodos: function() {
            return Todos._todos;
          },

          addTodo: function(title) {
            Todos._todos.push({
              title: title,
              completed: false
            });
          }
        };

        Todos.addTodo("New todo");
    notes: |
      1. Notice that we use Todos._todos notation.
      2. Mention that it might be inconvienient because of tight bounding.
         What happens if you change name?
      3. Say that later we will introduce something more flexible.
    microtasks:
      - description: Add function <code>clear</code> to <code>Todos</code> that empties todos array.
        hint: Add new property to object that is a function. Instead of clearing table just assign new one <code>Todos._todos = [];</code>
        js_assert:
          (function(){ Todos.addTodo("asd"); Todos.clear(); return Todos._todos.length === 0; }())

  - id: mvc1
    name: MV*
    title: Model-View-* architecture
    code:
      big: true
      hideOutput: true
      content: |
        var TodosModel = {
          getTodos: function() {
            // ✂---
          },
          addTodo: function(title) {
            // ✂---
          }
        };

        var TodosView = {
          renderAllTodos: function() {
            // Clear todos
            var todos = TodosModel.getTodos();
            for (var k in todos) {
              TodosView.renderTodo(todos[k]);
            }
          },
          renderTodo: function(todo) {
            // ✂---
          }
        };

    notes: |
      1. We have clear separation of responsibilities.
      2. But Model and View is tightly bound.
      3. We can try to decouple a bit by introducing controller.

  - id: mvc2
    name: MV*
    title: Model-View-* architecture
    code: 
      big: true
      hideOutput: true
      content: |
        var TodosModel = {
          getTodos: function() {},
          // Adds new todo to model and returns them
          addTodo: function(title) { return title; }
        };
        var TodosView = {
          renderAllTodos: function(todos) {
            for (var k in todos) {
              TodosView.renderTodo(todos[k]);
            }
          },
          renderTodo: function(todo) {
            // creates DOM elements and appends them
            console.log("Rendering", todo);
          }};

        // Controller
        TodosView.renderAllTodos(TodosModel.getTodos());

        // Adding new todo
        var todo = TodosModel.addTodo("New todo");
        TodosView.renderTodo(todo); // We have to remember about rendering

    notes: |
      1. Model and view is decoupled, but Controller has to care about synchronizing model and view.
      2. It would be good if changes in Model could be automatically reflected in view.

  - id: eventDriven1
    name: Events
    title: Observer pattern
    code:
      big: true
      language: java
      hideOutput: true
      content: |
        public interface Observer {
            void update(Observable obj, Object data); 
        }

        public class Observable {
            private Collection<Observer> observers = new LinkedHashSet<>();

            public void addObserver(Observer o) {
                observers.add(o);
            }

            public void notifyObservers(Object data) {
               for (Observer observer : observers) {
                    observer.update(this, data);
               }
            }
        }
    notes: |
      Observable object (subject) takes care about list of listeners and notifies them about changes.

      We can actually use this to decouple Model and View a little bit more.

  - id: eventDriven2
    name: Events
    title: Event-driven design
    fiddle:
      big: true
      js: |
        var TodosModel = {
          addTodo: function(todo) {
            TodosModel.notifyObservers(todo);
          },
          notifyObservers: function(data) {
            TodosModel._observer.update(data);
          },
          addObserver: function(observer) {
            TodosModel._observer = observer;
          }};
        var TodosView = {
          renderTodo: function(todo) {
            var $h1 = document.createElement('h1');
            $h1.innerText = todo;
            document.body.appendChild($h1);
          },
          update: function(data) {
            TodosView.renderTodo(data);
          }};

        TodosModel.addObserver(TodosView);

        // View is automagically notified
        TodosModel.addTodo("New todo");

    notes: |
      Motivation - how to ensure that when we modify model view will be refreshed?
      Why view have to be tied to only one model (or vice-versa)? How can we decouple them?
      We want to operate only on models and views should be refreshed automatically.

      Describe similarities to DOM. Talk about reactive design.
      Maybe mention something about one-thread(ness?) of JS.

      Java Observer pattern.

      Tell about JS nomenclature - trigger and listen, say that you can just add single function as a listener
    microtasks:
      - description: Add new todo with title <code>"Hello world"</code> to model and observe the output.
        hint: Invoke method <code>TodosModel.addTodo()</code> with value <code>"Hello world"</code>
        js: |
          TodosModel\.addTodo\s*\(\s*['"]Hello world['"]\s*\)

  - id: task-mvc-adding
    name: Task 4
    title: "Task: Adding new todo"
    code:
      hideOutput: true
      small: true
      content: |
        var todos = [];

        todos.push("append");
        todos.unshift("at the beginning");

        todos.push("at the end");
        todos.reverse();
        console.log(todos);
    task:
        duration: 60
        objectives:
            - It should be possible to add new todo.
            - Code should be organized in MV* manner.
        extras:
            - Use Bootstrap inline form
            - Adding by pressing "Enter"
            - Adding tags
        notes: |
          In solution point out that there is no need to handle keypress.
          It's better to just listen for $form.submit event.
        solution:
          name: Adding new todo - Solution
          title: Adding new todo
          fiddle:
            big: true
            js: |
              var TodosModel = {
                _todos: [],
                listener: null,
                addTodo: function(title) {
                  var todo = {
                    title: title,
                    completed: false
                  };

                  TodosModel._todos.push(todo);
                  TodosModel.listener({
                    name: 'add',
                    data: todo
                  });
                }
              };

              var TodosView = {
                initialize: function() {
                  var $input = document.querySelector('input.todo-add-input');
                  var $form = document.querySelector('form.todo-add-form');

                  $form.addEventListener('submit', function(ev) {
                      ev.preventDefault();
                      if (!$input.value) { return; }
                      TodosModel.addTodo($input.value);
                      $input.value = '';
                  });
                },

                renderTodo: function(todo) {
                  var $todosContainer = document.querySelector('.todos');

                  $todo = document.createElement('label');
                  $todo.className = 'list-group-item';

                  $checkbox = document.createElement('input');
                  $checkbox.type = 'checkbox';
                  $checkbox.checked = todo.completed;

                  $checkbox.addEventListener('change', function() {
                      todo.completed = $checkbox.checked;
                  });

                  $todo.appendChild($checkbox);
                  $todo.appendChild(document.createTextNode(" " + todo.title));

                  $todosContainer.appendChild($todo);
                },

                listener: function(ev) {
                  if (ev.name === 'add') {
                    TodosView.renderTodo(ev.data);
                  }
                }
              };

              // Assign listener
              TodosModel.listener = TodosView.listener;

              TodosView.initialize();

              TodosModel.addTodo("New todo 1");
              TodosModel.addTodo("New todo 2");

            html: |
              <!DOCTYPE html>
              <html lang="en">
                <head>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Todos</title>
                  <link rel="stylesheet" href="css/bootstrap.css">
                </head>
                <body>
                  <!-- page content -->
                  <div class="todos list-group"></div>
                  <form class="form-inline todo-add-form">
                    <input type="text" class="form-control todo-add-input">
                    <button class="btn btn-default todo-add-button">
                      <span class="glyphicon glyphicon-plus"></span>
                      Add todo
                    </button>
                  </div>
                  <script src="//code.jquery.com/jquery.js"></script>
                  <script src="js/bootstrap.js"></script>
                </body>
              </html>

  - id: hoisting
    name: Hoisting
    title: Function scope in javascript
    monitor: k
    code: |
      var todos = ["First todo", "Second todo"];
      for (var k in todos) {
        // do nothing
      }

      // Whoops?
      console.log(k);
    notes: |
      // Say about hoisting and scopes.
      // Do live demo of how the code is interpreted
      (function() {
        var todos;
        var k;

        todos = ["First todo", "Second todo"];
        for (k in todos) {
          // do nothing
        }

        // Whoops?
        console.log(k);

      }())

      // Explain that in JS there is no "block scope", we have only "function scope"
      // Mention that block scope variables comes in ECMAScript6
    microtasks:
      - description: Inside loop create new variable <code>todo</code> with value of <code>todos[k]</code>.
        hint: Write <code>var todo = todos[k];</code> inside a loop. What value does it have after loop?
        js: |
          var\s+todo\s*=\s*todos\s*\[\s*k\s*\]\s*
        js_assert: |
          todo === todos[todos.length - 1]

  - id: functional1
    name: Functional JS
    title: JS functional-style
    monitor: primes2
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var primes2 = [];
      for (var k in primes) {
         primes2.push(primes[k]);
      }

      primes.forEach(function(prime, k) {
        primes2.push(prime);
      });

    notes: |
      This is example is not impressive yet.
      But most important advantage is new scope created for loop.

  - id: functional2
    name: Functional JS
    title: JS functional-style processing
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.map(function(prime) {
        return prime * prime;
      });
    notes: |
      `map` will return new array with every item converted by given function
      But what if we want to process only completed elements?
    microtasks:
      - description: <code>result</code> array should contain all elements in power of <code>3</code>
        hint: <code>prime * prime * prime</code>
        js_assert: |
          result[0] === 8 && result[2] === 125

  - id: functional3
    name: Functional JS
    title: JS functional-style processing - chaining
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.filter(function(prime) {
        return prime > 7;
      }).map(function(prime) {
        return prime * prime;
      });
    notes: |
      We can chain invocations because those functions just returns new arrays
    microtasks:
      - description: Chain result one more time and remove every number lesser than <code>150</code>
        hint: Use <code>filter</code> method and <code>prime2 &lt; 15</code> return value.
        js_assert: |
          result.length === 1 && result[0] === 121

  - id: functional4
    name: Functional JS
    title: JS functional-style reduce
    monitor: result
    code: |
      var primes = [2, 3, 5, 7, 11, 13];

      var result = primes.reduce(function(sum, prime) {
        return sum + prime;
      }, 0);

    notes: |
      Using `reduce` we can process arrays in more advanced ways.
    microtasks:
      - description: In <code>result</code> store multiplication of all elements using reduce.
        hint: Change default value at the end to <code>1</code> and change operation inside function.
        js_assert: |
          result === primes.reduce(function(m, p) { return m * p; }, 1)

  - id: task-functional
    name: Task 5
    title: "Task: Add button to hide completed todos"
    notes: |
      // Solution to finding count of `reduce`
      var TodosModel = {
        _todos: [
          { title: "Buy beer", completed: true },
          { title: "Buy bread", completed: false },
        ],
        getStats: function() {
          return TodosModel._todos.reduce(function(memo, todo) {
            if (todo.completed) {
              memo.completed++;
            } else {
              memo.uncompleted++;
            }
            return memo;
          }, {
            completed: 0,
            uncompleted: 0
          });
        }
      };

      var b = document.body;
      var result = TodosModel.getStats();
      var table = "<h1>{0} completed</h1><h1>{1} uncompleted</h1>";
      b.innerHTML += table.replace('{0}', result.completed).replace('{1}', result.uncompleted);

    task:
      duration: 20
      objectives:
        - Add button or checkbox to show / hide completed todos
        - Do it using <code>filter</code> function
      extras:
        - Count both completed and uncompleted todos using <code>reduce</code>
      solution:
        name: Add button to hide completed todos - Solution
        title: Add button to hide completed todos
        fiddle:
          big: true
          js: |
              var TodosModel = {
                listener: null,
                _todos: [],
                _hideCompleted: false,
                addTodo: function(title) {
                  var todo = {
                    title: title,
                    completed: false
                  };

                  TodosModel._todos.push(todo);
                  TodosModel.listener({
                    name: 'add',
                    data: todo
                  });
                },
                getTodos: function() {
                  return TodosModel._todos.filter(function(todo){
                    return !TodosModel._hideCompleted || !todo.completed;
                  });
                },
                setHideCompleted: function(hideCompleted) {
                  TodosModel._hideCompleted = hideCompleted;
                  TodosModel.listener({
                    name: 'reset',
                    data: TodosModel.getTodos()
                  });
                }
              };

              var TodosView = {
                initialize: function() {
                  var $input = document.querySelector('input.todo-add-input');
                  var $form = document.querySelector('form.todo-add-form');

                  $form.addEventListener('submit', function(ev) {
                      ev.preventDefault();

                      if (!$input.value) { return; }
                      TodosModel.addTodo($input.value);
                      $input.value = '';
                  });

                  var $hideCompleted = document.querySelector('input.todo-hide-completed');
                  $hideCompleted.addEventListener('change', function() {
                    TodosModel.setHideCompleted($hideCompleted.checked);
                  });
                },

                renderTodo: function(todo) {
                  var $todosContainer = document.querySelector('.todos');

                  $todo = document.createElement('label');
                  $todo.className = 'list-group-item';

                  $checkbox = document.createElement('input');
                  $checkbox.type = 'checkbox';
                  $checkbox.checked = todo.completed;

                  $checkbox.addEventListener('change', function() {
                      todo.completed = $checkbox.checked;
                  });

                  $todo.appendChild($checkbox);
                  $todo.appendChild(document.createTextNode(" " + todo.title));

                  $todosContainer.appendChild($todo);
                },
                renderAll: function(todos) {
                  document.querySelector('.todos').innerHTML = '';
                  todos.forEach(function(todo) {
                    TodosView.renderTodo(todo);
                  });
                },
                listener: function(ev) {
                  if (ev.name === 'add') {
                    TodosView.renderTodo(ev.data);
                  } else if (ev.name === 'reset') {
                    TodosView.renderAll(ev.data);
                  }
                }
              };

              // Assign listener
              TodosModel.listener = TodosView.listener;

              TodosView.initialize();

              TodosModel.addTodo("New todo 1");
              TodosModel.addTodo("New todo 2");
          html: |
              <!DOCTYPE html>
              <html lang="en">
                <head>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Todos</title>
                  <link rel="stylesheet" href="css/bootstrap.css">
                </head>
                <body>
                  <!-- page content -->
                  <div class="todos list-group"></div>
                  <form class="form-inline">
                    <label>
                      <input type="checkbox" class="todo-hide-completed">
                      Hide completed todos
                    </label>
                  </form>
                  <form class="form-inline todo-add-form">
                    <input type="text" class="form-control todo-add-input">
                    <button class="btn btn-default todo-add-button">
                      <span class="glyphicon glyphicon-plus"></span>
                      Add todo
                    </button>
                  </div>
                  <script src="//code.jquery.com/jquery.js"></script>
                  <script src="js/bootstrap.js"></script>
                </body>
              </html>

  - id: json
    name: JSON
    title: JavaScript Object Notation
    monitor: json
    code: |
      var o = {
        array: [1, 2],
        string: "xyz",
        date: new Date(),
        empty: undefined
      };

      // serialize to JSON
      var serialized = JSON.stringify(o);
      console.log(serialized);

      // deserialize
      var json = JSON.parse(serialized);

    notes: |
      Lightweight, human readable exchange format.
      Supports only objects, arrays, strings and numbers.
      Builtin support for serializing and deserializing

      More strict then JS object literals (quotes are required)

      Explain how outputs under code works.
    microtasks:
      - description: Add property named <code>Null</code> to store <code>null</code> value
        hint: "Add <code>Null: null</code> in <code>o</code> object literal"
        js_assert: |
          o.Null === null

  - id: localStorage
    name: Local Storage
    title: Persistence using Local Storage
    monitor: noOfVisits
    code: |
      // retrieve something from localStorage
      var noOfVisits = window.localStorage['noOfVisits'];

      noOfVisits = parseInt(noOfVisits, 10);
      if (isNaN(noOfVisits)) {
        noOfVisits = 0;
      }

      // put something to localStorage
      localStorage.setItem('noOfVisits', noOfVisits + 1);

      // You can also use method instead of []
      var result = localStorage.getItem('noOfVisits');
    microtasks:
      - description: Use <code>[]</code> notation to set <code>noOfVisits</code> to Local Storage
        hint: Change invocation of <code>setItem</code> to  <code>localStorage['noOfVisits'] = noOfVisits + 1</code>
        js: |
          localStorage\[["']noOfVisits["']\]\s*=\s*noOfVisits

    notes: |
      Say that we can also build purely client-side JS applications.
      For persistence we can use for instance Local or Session storage.

      Mention that for instance when you write Chrome plugins you have a lot more APIs available (like filesystem etc).

      Point out that localStorage
        1. Is persistent (even when you turn off the browser)
        2. Is limited (5MB per domain)
        3. Is only readable by your domain
        4. Can only store strings
        5. Is synchronous :(

      Ask how to store complex structures inside localStorage.
    footer: |
        <br>
        <h2 class="checkbox">
          <label>
            <input type="checkbox" class="training-checkbox" data-training="html5" style="width:25px;height:25px">
            &nbsp; I would be interested in <span class="text-primary">Building Webapps with HTML5 APIs</span> training
          </label>
        </h2>
    script: *trainingStats

  - id: task-localStorage
    name: Task 6
    title: "Task: Use Local Storage for persistence in your todos application" 
    task:
      duration: 30
      objectives:
        - Add persistence to your application using Local Storage
      extras:
        - Extract storage logic into separate singleton
        - Don't assume that Local Storage is synchronous. Add asynchronous callbacks to your storage API.
      solution:
          title: LocalStorage
          left:
            monitor: result
            code:
              big: true
              content: |
                var Storage = {
                  addTodo: function(todo, callback) {
                     var todos = this._getTodos();
                     todos.push(todo);
                     this._saveTodos(todos);
                     callback && callback(todo);
                  },
                  getTodos: function(callback) {
                      callback(this._getTodos());
                  },
                  _getTodos: function() {
                    var todosStr = localStorage.getItem('todos');
                    var todos = [];
                    if (todosStr) {
                      todos = JSON.parse(todosStr) || [];
                    }
                    return todos;
                  },
                  _saveTodos: function(todos) {
                    localStorage.setItem('todos', JSON.stringify(todos));
                  },
                  clear: function() {
                      this._saveTodos([]);
                  },
                };

                Storage.clear();
                Storage.addTodo({
                  id: "abc"
                });
                Storage.addTodo({
                  id: "abc2"
                });
                Storage.getTodos(function(todos) {
                    result = todos;
                });
          right:
            code:
              big: true
              content: |
                left:
            code:
              big: true
              language: javascript-norun
              content: |
                var Storage = {
                  addTodo: function(todo, callback) {
                      $.ajax({
                          method: 'post',
                          url: '/todos',
                          data: JSON.stringify(todo),
                          contentType: 'application/json; charset=utf-8'
                      }).then(callback);
                  },
                  updateTodo: function(todo, callback) {
                      return $.ajax({
                        method: 'put',
                        url: '/todos/' + todo.id,
                        data: JSON.stringify(todo),
                        contentType: 'application/json; charset=utf-8'
                      }).then(callback);
                  },
                  getTodos: function(callback) {
                      $.get('/todos').then(function(todos) {
                          callback(todos);
                      });
                  }
                };

  - id: task-survey
    name: Task 7
    title: "Task: Complete the survey"
    text: |
      <h2>
      <span class="glyphicon glyphicon-export text-muted"></span>
        <a href="https://docs.google.com/forms/d/1XZQGOlMVqDQlLpMmmKurPCESzXpe3QPH9y3oHNR5AMo/viewform">
          Training Survey
        </a>
      </h2>
    task:
      duration: 10
      objectives:
        - Complete the survey under link above
      extras:
        - Provide very detailed answers to open-ended questions

  - id: ending
    name: Ending
    title: How do you like JS?
    text: |
      <div class="text-center">
        <a href="http://pl.tinypic.com?ref=oa2mbk" target="_blank">
          <img src="http://i39.tinypic.com/oa2mbk.png" alt="Image and video hosting by TinyPic" width="400">
        </a>
      </div>
      <h3 class="text-right">
        <span class="icon-mail text-muted"></span>
        <a href="mailto:tomasz.drwiega@gmail.com">tomasz.drwiega@gmail.com</a>
      </h3>
      <h3 class="text-right">
        <span class="icon-github text-muted"></span> <a href="https://github.com/tomusdrw" target="profile">github/tomusdrw</a>
        &nbsp;
        <span class="icon-google-plus text-muted"></span> <a href="https://plus.google.com/+TomaszDrwi%C4%99ga" target="profile">+Tomasz Drwięga</a>
        &nbsp;
        <span class="icon-linkedin text-muted"></span> <a href="http://www.linkedin.com/in/tomaszdrwiega" target="profile">in/Tomasz Drwięga</a>
      </h3>